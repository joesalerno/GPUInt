{"numTotalTestSuites":60,"numPassedTestSuites":60,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":270,"numPassedTests":0,"numFailedTests":0,"numPendingTests":270,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749768996314,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"skipped","title":"should create BigIntPrimitive for zero string \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"skipped","title":"should create BigIntPrimitive for zero number 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"skipped","title":"should handle empty string as zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"skipped","title":"should throw TypeError for invalid string input (non-numeric characters)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"skipped","title":"should throw TypeError for invalid input types","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"skipped","title":"should parse valid integer strings","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"skipped","title":"should parse valid decimal strings","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"skipped","title":"should parse scientific notation","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"skipped","title":"should normalize inputs","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"skipped","title":"should handle number input, including decimals","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"skipped","title":"should handle copy constructor","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"skipped","title":"should throw TypeError for invalid string formats","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"skipped","title":"should throw TypeError for invalid string input (non-numeric characters)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"skipped","title":"should throw TypeError for non-finite numeric input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"skipped","title":"negate() should flip the sign of a positive number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"skipped","title":"negate() should flip the sign of a negative number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"skipped","title":"negate() should handle zero correctly","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"skipped","title":"abs() should return positive for a negative number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"skipped","title":"abs() should return positive for a positive number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"skipped","title":"abs() should handle zero correctly","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"skipped","title":"isPositive() and isNegative() should work correctly","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"skipped","title":"compareMagnitude() should correctly compare magnitudes","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"skipped","title":"should correctly compare positive numbers","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"skipped","title":"should correctly compare negative numbers","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"skipped","title":"should correctly compare numbers with mixed signs","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"skipped","title":"should correctly compare with zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"skipped","title":"should correctly compare large multi-limb numbers","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"skipped","title":"should throw TypeError for invalid input type","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"skipped","title":"should correctly evaluate equality","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"skipped","title":"should correctly evaluate greater than","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"skipped","title":"should correctly evaluate greater than or equal","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"skipped","title":"should correctly evaluate less than","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"skipped","title":"should correctly evaluate less than or equal","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"skipped","title":"should convert simple BigIntPrimitive to string","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"skipped","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"skipped","title":"should convert single-digit number (single limb) to string","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"skipped","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"skipped","title":"should convert positive integer string to number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"skipped","title":"should convert negative integer string to number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"skipped","title":"should convert zero string to number zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"skipped","title":"should handle very large numbers with potential precision loss","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"skipped","title":"should convert numbers at the edge of safe integer precision","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"skipped","title":"should return the string representation of the number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"skipped","title":"should work correctly with JSON.stringify()","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"skipped","title":"should return the string representation of the number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"skipped","title":"should be used in string concatenation","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"skipped","title":"should be used in template literals","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"skipped","title":"should return true for zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"skipped","title":"should return false for non-zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"skipped","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"skipped","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"skipped","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"skipped","title":"should handle adding zero to a number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"skipped","title":"should add two multi-limb numbers with carries","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"skipped","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"skipped","title":"should handle positive - positive (a > b)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"skipped","title":"should handle positive - positive (a < b)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"skipped","title":"should handle positive - positive (a == b)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"skipped","title":"should handle positive - negative","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"skipped","title":"should handle negative - positive","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"skipped","title":"should handle negative - negative (abs(a) > abs(b))","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"skipped","title":"should handle negative - negative (abs(a) < abs(b))","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"skipped","title":"should handle negative - negative (a == b)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"skipped","title":"a - 0 = a","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"skipped","title":"0 - a = -a","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"skipped","title":"0 - (-a) = a","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"skipped","title":"0 - 0 = 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"skipped","title":"should subtract two positive single-limb numbers, no borrow","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"skipped","title":"should subtract with borrow handled by shader and JS propagation","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"skipped","title":"should correctly subtract \"10000\" - \"1\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"skipped","title":"should subtract to zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"skipped","title":"should handle multi-limb subtraction with borrows","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"skipped","title":"should return zero if limbValue is 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"skipped","title":"should return zero if otherNumber is zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"skipped","title":"limbValue * single-limb otherNumber, no final carry","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"skipped","title":"limbValue * single-limb otherNumber, with final carry","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"skipped","title":"limbValue * multi-limb otherNumber, no JS propagated carry","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"skipped","title":"limbValue * multi-limb otherNumber, with JS propagated carry","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"skipped","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"skipped","title":"CPU: 5 * \"123\" = \"615\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"skipped","title":"CPU: 9 * \"9\" = \"81\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"skipped","title":"CPU: 5 * \"1234\" = \"6170\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"skipped","title":"CPU: 0 * \"12345\" = \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"skipped","title":"CPU: 7 * \"0\" = \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"skipped","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"skipped","title":"should return zero if num1 is zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"skipped","title":"should return zero if num2 is zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"skipped","title":"single-limb * single-limb","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"skipped","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"skipped","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"skipped","title":"123 * 45 = 5535","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"skipped","title":"should throw TypeError for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"skipped","title":"a * 0 = 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"skipped","title":"0 * a = 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"skipped","title":"positive * positive = positive","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"skipped","title":"positive * negative = negative","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"skipped","title":"negative * positive = negative","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"skipped","title":"negative * negative = positive","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"skipped","title":"multiply result of zero should have positive sign","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"skipped","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"skipped","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"skipped","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"skipped","title":"positive * positive = positive (forceCPU)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"skipped","title":"negative * positive = negative (forceCPU)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"skipped","title":"Karatsuba integration: large numbers with forceCPU","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"skipped","title":"RM_DOWN (0): should truncate to specified decimal places","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"skipped","title":"RM_HALF_UP (1): placeholder for future tests","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"skipped","title":"RM_HALF_EVEN (2): placeholder for future tests","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"skipped","title":"RM_UP (3): placeholder for future tests","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"skipped","title":"Negative dp (rounding to powers of 10): placeholder","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"skipped","title":"x.pow(0) should return 1","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"skipped","title":"x.pow(1) should return x","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"skipped","title":"0.pow(n) should return 0 for n > 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"skipped","title":"1.pow(n) should return 1","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"skipped","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"skipped","title":"should calculate simple positive base and exponent","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"skipped","title":"should calculate negative base with even/odd exponent","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"skipped","title":"should handle larger numbers and exponents","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"skipped","title":"should use CPU path and respect forceCPU option","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"skipped","title":"should throw TypeError for non-integer exponent","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"skipped","title":"should throw TypeError for negative exponent","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"skipped","title":"should throw Error for exponent too large","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"skipped","title":"should return a copy when power is 0","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"skipped","title":"should multiply by 10^1 (formerly BASE^1)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"skipped","title":"should multiply by 10^2 (formerly BASE^2)","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"skipped","title":"should multiply multi-digit number by 10^3","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"skipped","title":"should return zero if this is zero","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"skipped","title":"should preserve sign for negative numbers","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"skipped","title":"should throw error if power is negative","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"skipped","title":"should throw error if power is not an integer","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"skipped","title":"should handle power of 0 for a zero number","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"skipped","title":"should use CPU path when forceCPU is true for add()","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"skipped","title":"should use CPU path when forceCPU is true for subtract()","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"skipped","title":"should use CPU path for multiply() when forceCPU is true","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"skipped","title":"should throw TypeError when constructing with a number in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"skipped","title":"should NOT throw when constructing with a string in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"skipped","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"skipped","title":"should allow number construction if strict mode is explicitly set to false locally","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"skipped","title":"should throw Error when valueOf() is called in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"skipped","title":"should NOT throw for valueOf() if strict mode is explicitly false","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"skipped","title":"should convert \"123\" to 123 without error in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"skipped","title":"should convert \"123.45\" to 123.45 without error in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"skipped","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"skipped","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"skipped","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"skipped","title":"should throw Error for numbers that lose precision with Number() conversion","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"skipped","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"skipped","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"skipped","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"skipped","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"skipped","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"skipped","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"skipped","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"skipped","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"skipped","title":"should throw an error for negative numbers","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"skipped","title":"sqrt(0) should be 0","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"skipped","title":"sqrt(1) should be 1","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"skipped","title":"sqrt(4) should be 2","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"skipped","title":"sqrt(9) should be 3","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"skipped","title":"sqrt(16) should be 4","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"skipped","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"skipped","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"skipped","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"skipped","title":"sqrt(0.0004) with DP=4 should be 0.02","failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"skipped","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"skipped","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"skipped","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"skipped","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"skipped","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"skipped","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"skipped","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"skipped","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"skipped","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"skipped","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"skipped","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"skipped","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"skipped","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"skipped","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"skipped","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"skipped","title":"Division of zero: 0 / 5 (DP=0) should be 0","failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"skipped","title":"Division by zero should throw error","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"skipped","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"skipped","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"skipped","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"skipped","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"skipped","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"skipped","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"skipped","title":"Error Handling: Division by zero","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"skipped","title":"Error Handling: TypeError for invalid divisor","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"skipped","title":"10 / 3 => Q=3, R=1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"skipped","title":"12 / 4 => Q=3, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"skipped","title":"5 / 10 => Q=0, R=5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"skipped","title":"0 / 5 => Q=0, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"skipped","title":"12345 / 1 => Q=12345, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"skipped","title":"10000 / 1 => Q=10000, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"skipped","title":"9999 / 10000 => Q=0, R=9999","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"skipped","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"skipped","title":"123456 / 123 => Q=1003, R=87","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"skipped","title":"1000000 / 101 => Q=9900, R=100","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"skipped","title":"10 / 2 => Q=5, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"skipped","title":"20 / 10 => Q=2, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"skipped","title":"100 / 10 => Q=10, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"skipped","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"skipped","title":"123 / 12345 => Q=0, R=123","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"skipped","title":"500000010 / 10000 => Q=50000, R=10","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"skipped","title":"99999 / 100 => Q=999, R=99","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"skipped","title":"60 / 10 => Q=6, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"skipped","title":"10 / 3 => Q=3, R=1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"skipped","title":"-10 / 3 => Q=-3, R=-1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"skipped","title":"10 / -3 => Q=-3, R=1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"skipped","title":"-10 / -3 => Q=3, R=-1","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"skipped","title":"12 / 4 => Q=3, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"skipped","title":"-12 / 4 => Q=-3, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"skipped","title":"12 / -4 => Q=-3, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"skipped","title":"-12 / -4 => Q=3, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"skipped","title":"5 / 10 => Q=0, R=5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"skipped","title":"-5 / 10 => Q=0, R=-5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"skipped","title":"5 / -10 => Q=0, R=5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"skipped","title":"-5 / -10 => Q=0, R=-5","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"skipped","title":"0 / 7 => Q=0, R=0","failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"skipped","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"skipped","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"skipped","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"skipped","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"skipped","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"skipped","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"skipped","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"skipped","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"skipped","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"skipped","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"skipped","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"skipped","title":"PE = 5: \"12345\" should be \"12345\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"skipped","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"skipped","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"skipped","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"skipped","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"skipped","title":"NE = -2: \"0.012\" should be \"0.012\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"skipped","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"skipped","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"skipped","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"skipped","title":"NE = -3: \"0.0012\" should be \"0.0012\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"skipped","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"skipped","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"skipped","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"skipped","title":"positive dp: should truncate fractional part","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"skipped","title":"negative dp: should make integer digits zero","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"skipped","title":"negative numbers: should truncate towards zero","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"skipped","title":"zero: should remain zero","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"skipped","title":"positive dp: half rounds up (away from zero)","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"skipped","title":"negative dp: half rounds up (away from zero in magnitude)","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"skipped","title":"negative numbers: half rounds away from zero (more negative)","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"skipped","title":"zero: should remain zero","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"skipped","title":"positive dp: half to even","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"skipped","title":"dp = 0: half to even","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"skipped","title":"negative numbers: half to even","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"skipped","title":"positive numbers: away from zero","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"skipped","title":"negative numbers: away from zero (more negative)","failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"skipped","title":"negative dp: away from zero","failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"skipped","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","failureMessages":[],"meta":{}}],"startTime":1749768996314,"endTime":1749768996314,"status":"passed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"skipped","title":"renders initial UI elements correctly","failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"skipped","title":"performs simple addition (WebGL Path) and displays result","failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"skipped","title":"performs simple multiplication (WebGL Path) and displays result","failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"skipped","title":"performs simple subtraction (CPU Path) and displays result","failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"skipped","title":"handles error for invalid input","failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"skipped","title":"handles division by zero error","failureMessages":[],"meta":{}}],"startTime":1749768996314,"endTime":1749768996314,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}