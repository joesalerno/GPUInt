{"numTotalTestSuites":60,"numPassedTestSuites":49,"numFailedTestSuites":11,"numPendingTestSuites":0,"numTotalTests":270,"numPassedTests":220,"numFailedTests":50,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749768731730,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"passed","title":"should create BigIntPrimitive for zero string \"0\"","duration":4.51906399987638,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"passed","title":"should create BigIntPrimitive for zero number 0","duration":0.8435690000187606,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"passed","title":"should handle empty string as zero","duration":0.663219999987632,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.0339460000395775,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"passed","title":"should throw TypeError for invalid input types","duration":1.5679440000094473,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"passed","title":"should parse valid integer strings","duration":0.997397999977693,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"passed","title":"should parse valid decimal strings","duration":1.6389450000133365,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"passed","title":"should parse scientific notation","duration":1.6763600001577288,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"passed","title":"should normalize inputs","duration":1.6710860000457615,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"passed","title":"should handle number input, including decimals","duration":1.1224119998514652,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"passed","title":"should handle copy constructor","duration":1.0382850000169128,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"passed","title":"should throw TypeError for invalid string formats","duration":1.3380379998125136,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":0.5440569999627769,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"passed","title":"should throw TypeError for non-finite numeric input","duration":1.034781999886036,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"passed","title":"negate() should flip the sign of a positive number","duration":0.7050680001266301,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"passed","title":"negate() should flip the sign of a negative number","duration":0.3467290000990033,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"passed","title":"negate() should handle zero correctly","duration":0.2698089999612421,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"passed","title":"abs() should return positive for a negative number","duration":0.4484319998882711,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"passed","title":"abs() should return positive for a positive number","duration":0.30837600002996624,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"passed","title":"abs() should handle zero correctly","duration":1.0166260001715273,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"passed","title":"isPositive() and isNegative() should work correctly","duration":1.333409999962896,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"passed","title":"compareMagnitude() should correctly compare magnitudes","duration":1.7839110000059009,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"passed","title":"should correctly compare positive numbers","duration":0.9796549999155104,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"passed","title":"should correctly compare negative numbers","duration":0.8933360001537949,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"passed","title":"should correctly compare numbers with mixed signs","duration":0.6632670001126826,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"passed","title":"should correctly compare with zero","duration":1.31118299998343,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"passed","title":"should correctly compare large multi-limb numbers","duration":1.646142999874428,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"passed","title":"should throw TypeError for invalid input type","duration":1.7827649998944253,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"passed","title":"should correctly evaluate equality","duration":1.2555300001986325,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.6343149999156594,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"passed","title":"should correctly evaluate greater than","duration":1.4912880000192672,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.5929829999804497,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"passed","title":"should correctly evaluate greater than or equal","duration":1.3962339998688549,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.604120000032708,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"passed","title":"should correctly evaluate less than","duration":1.3986949999816716,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.6212519998662174,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"passed","title":"should correctly evaluate less than or equal","duration":1.3865569999907166,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.6245500000659376,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"passed","title":"should convert simple BigIntPrimitive to string","duration":0.5552749999333173,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"passed","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","duration":0.5240749998483807,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"passed","title":"should convert single-digit number (single limb) to string","duration":0.5232510000932962,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"passed","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","duration":1.218705000123009,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"passed","title":"should convert positive integer string to number","duration":0.7591490000486374,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"passed","title":"should convert negative integer string to number","duration":0.5419840000104159,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"passed","title":"should convert zero string to number zero","duration":0.4934229999780655,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"passed","title":"should handle very large numbers with potential precision loss","duration":1.0379830000456423,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"passed","title":"should convert numbers at the edge of safe integer precision","duration":1.3858310000505298,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.8254779998678714,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"passed","title":"should work correctly with JSON.stringify()","duration":0.7384250001050532,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.8169400000479072,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"passed","title":"should be used in string concatenation","duration":0.5984259999822825,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"passed","title":"should be used in template literals","duration":0.6037729999516159,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"passed","title":"should return true for zero","duration":0.5070790001191199,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"passed","title":"should return false for non-zero","duration":0.5175560000352561,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","duration":12.341359999962151,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","duration":7.4385539998766035,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"passed","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","duration":7.089354999829084,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"passed","title":"should handle adding zero to a number","duration":7.107672999845818,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"passed","title":"should add two multi-limb numbers with carries","duration":7.286440999945626,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"passed","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","duration":7.027479999931529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"passed","title":"should handle positive - positive (a > b)","duration":2.5519040001090616,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"passed","title":"should handle positive - positive (a < b)","duration":2.412118000211194,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"passed","title":"should handle positive - positive (a == b)","duration":2.0754140000790358,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"passed","title":"should handle positive - negative","duration":7.313029000069946,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"passed","title":"should handle negative - positive","duration":7.635865000076592,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"passed","title":"should handle negative - negative (abs(a) > abs(b))","duration":2.559698000084609,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"passed","title":"should handle negative - negative (abs(a) < abs(b))","duration":2.5343259999062866,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"passed","title":"should handle negative - negative (a == b)","duration":2.9416229999624193,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"passed","title":"a - 0 = a","duration":2.2479100001510233,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"passed","title":"0 - a = -a","duration":2.2887860001064837,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"passed","title":"0 - (-a) = a","duration":6.4641650000121444,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"passed","title":"0 - 0 = 0","duration":2.571728999959305,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"passed","title":"should subtract two positive single-limb numbers, no borrow","duration":9.01184399984777,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"passed","title":"should subtract with borrow handled by shader and JS propagation","duration":7.905309000052512,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"passed","title":"should correctly subtract \"10000\" - \"1\"","duration":7.9042069998104125,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"passed","title":"should subtract to zero","duration":18.2643059999682,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"passed","title":"should handle multi-limb subtraction with borrows","duration":2.8025589999742806,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"passed","title":"should return zero if limbValue is 0","duration":3.0148190001491457,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"passed","title":"should return zero if otherNumber is zero","duration":2.950618000002578,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"passed","title":"limbValue * single-limb otherNumber, no final carry","duration":2.5062400000169873,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"passed","title":"limbValue * single-limb otherNumber, with final carry","duration":2.5302180000580847,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, no JS propagated carry","duration":2.6869379999116063,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, with JS propagated carry","duration":2.9039199999533594,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"passed","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","duration":2.8290430000051856,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"passed","title":"CPU: 5 * \"123\" = \"615\"","duration":0.8348280000500381,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"passed","title":"CPU: 9 * \"9\" = \"81\"","duration":0.607477999990806,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"passed","title":"CPU: 5 * \"1234\" = \"6170\"","duration":0.6190209998749197,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"passed","title":"CPU: 0 * \"12345\" = \"0\"","duration":0.6870099999941885,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"passed","title":"CPU: 7 * \"0\" = \"0\"","duration":0.6024929999839514,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"passed","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","duration":0.6209970000199974,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"passed","title":"should return zero if num1 is zero","duration":1.25188499991782,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"passed","title":"should return zero if num2 is zero","duration":0.6072080000303686,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"passed","title":"single-limb * single-limb","duration":4.094616000074893,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"passed","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","duration":1.4563120000530034,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"passed","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","duration":3.1836920001078397,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"passed","title":"123 * 45 = 5535","duration":3.7139939998742193,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":1.1783590000122786,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"passed","title":"a * 0 = 0","duration":1.0164439999498427,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"passed","title":"0 * a = 0","duration":0.8316659999545664,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"passed","title":"positive * positive = positive","duration":2.7970600000116974,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"passed","title":"positive * negative = negative","duration":2.734542000107467,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"passed","title":"negative * positive = negative","duration":2.8808979999739677,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"passed","title":"negative * negative = positive","duration":2.7885480001568794,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"passed","title":"multiply result of zero should have positive sign","duration":5.252725000027567,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"failed","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","duration":115.76256699999794,"failureMessages":["AssertionError: expected \"_core_multiply\" to be called 9 times, but got 1 times\n    at /app/lib/bigint.test.js:1163:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"failed","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","duration":9.690162000013515,"failureMessages":["AssertionError: expected \"_splitAt\" to be called at least once\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1326:10)\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1022:14)\n    at Proxy.methodWrapper (file:///app/node_modules/chai/chai.js:1618:25)\n    at /app/lib/bigint.test.js:1196:28\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"passed","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","duration":2.715836000163108,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"passed","title":"positive * positive = positive (forceCPU)","duration":1.3632610000204295,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"passed","title":"negative * positive = negative (forceCPU)","duration":1.2042969998437911,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"failed","title":"Karatsuba integration: large numbers with forceCPU","duration":36.80602699983865,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:542:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:559:29)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at /app/lib/bigint.test.js:1252:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"passed","title":"RM_DOWN (0): should truncate to specified decimal places","duration":3.817617999855429,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"passed","title":"RM_HALF_UP (1): placeholder for future tests","duration":1.075442000059411,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"passed","title":"RM_HALF_EVEN (2): placeholder for future tests","duration":0.7064549999777228,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"passed","title":"RM_UP (3): placeholder for future tests","duration":0.5821709998417646,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"passed","title":"Negative dp (rounding to powers of 10): placeholder","duration":0.6387090000789613,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"passed","title":"x.pow(0) should return 1","duration":0.8722870000638068,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"passed","title":"x.pow(1) should return x","duration":0.9733860001433641,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"passed","title":"0.pow(n) should return 0 for n > 0","duration":0.6749950000084937,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"passed","title":"1.pow(n) should return 1","duration":0.7702040001749992,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"passed","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","duration":0.9873819998465478,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"passed","title":"should calculate simple positive base and exponent","duration":1.5758940000087023,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"passed","title":"should calculate negative base with even/odd exponent","duration":0.9715679998043925,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"passed","title":"should handle larger numbers and exponents","duration":1.1798180001787841,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"passed","title":"should use CPU path and respect forceCPU option","duration":1.1019250000827014,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"passed","title":"should throw TypeError for non-integer exponent","duration":1.0554380000103265,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"passed","title":"should throw TypeError for negative exponent","duration":0.7040320001542568,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"passed","title":"should throw Error for exponent too large","duration":0.7544430000707507,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"passed","title":"should return a copy when power is 0","duration":1.3413410000503063,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"passed","title":"should multiply by 10^1 (formerly BASE^1)","duration":0.5973949998151511,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"passed","title":"should multiply by 10^2 (formerly BASE^2)","duration":0.5452749999240041,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"passed","title":"should multiply multi-digit number by 10^3","duration":0.6080509999301285,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"passed","title":"should return zero if this is zero","duration":0.8023180000018328,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"passed","title":"should preserve sign for negative numbers","duration":0.7145469998940825,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"passed","title":"should throw error if power is negative","duration":3.6075279999058694,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"passed","title":"should throw error if power is not an integer","duration":2.963866999838501,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"passed","title":"should handle power of 0 for a zero number","duration":2.3667719999793917,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"passed","title":"should use CPU path when forceCPU is true for add()","duration":2.2345290000084788,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"passed","title":"should use CPU path when forceCPU is true for subtract()","duration":6.617332000052556,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"passed","title":"should use CPU path for multiply() when forceCPU is true","duration":2.6086430000141263,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"passed","title":"should throw TypeError when constructing with a number in strict mode","duration":0.7108399998396635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"passed","title":"should NOT throw when constructing with a string in strict mode","duration":0.4390660000499338,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"passed","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","duration":0.3920560001861304,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"passed","title":"should allow number construction if strict mode is explicitly set to false locally","duration":0.614880999783054,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"passed","title":"should throw Error when valueOf() is called in strict mode","duration":0.3844810000155121,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"passed","title":"should NOT throw for valueOf() if strict mode is explicitly false","duration":0.6943860000465065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"passed","title":"should convert \"123\" to 123 without error in strict mode","duration":0.5518199999351054,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"passed","title":"should convert \"123.45\" to 123.45 without error in strict mode","duration":0.3010820001363754,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"passed","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","duration":0.43809300009161234,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"passed","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","duration":0.582575999898836,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"passed","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","duration":0.2532969999592751,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"passed","title":"should throw Error for numbers that lose precision with Number() conversion","duration":0.8326610000804067,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"passed","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","duration":0.29889199999161065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"passed","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","duration":0.5731569998897612,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"passed","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","duration":0.26206799992360175,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"passed","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","duration":0.6945579999592155,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"passed","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","duration":0.946328999940306,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"passed","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","duration":0.23262300016358495,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"passed","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","duration":0.561938000144437,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"passed","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","duration":0.39593999995850027,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"passed","title":"should throw an error for negative numbers","duration":0.7086420000996441,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"passed","title":"sqrt(0) should be 0","duration":0.5500810001976788,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"failed","title":"sqrt(1) should be 1","duration":21.877809999976307,"failureMessages":["AssertionError: expected '0' to be '1' // Object.is equality\n    at /app/lib/bigint.test.js:1672:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"failed","title":"sqrt(4) should be 2","duration":3.3646449998486787,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at /app/lib/bigint.test.js:1678:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"failed","title":"sqrt(9) should be 3","duration":2.3940540000330657,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at /app/lib/bigint.test.js:1684:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"failed","title":"sqrt(16) should be 4","duration":2.5012570000253618,"failureMessages":["AssertionError: expected '0' to be '4' // Object.is equality\n    at /app/lib/bigint.test.js:1690:39\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"failed","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","duration":4.723763999994844,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.41421356237309504880' // Object.is equality\n    at /app/lib/bigint.test.js:1697:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"failed","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","duration":3.3600830000359565,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.7320508075688772935' // Object.is equality\n    at /app/lib/bigint.test.js:1704:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"failed","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","duration":3.03933300008066,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '111.10805551353974002952' // Object.is equality\n    at /app/lib/bigint.test.js:1711:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"failed","title":"sqrt(0.0004) with DP=4 should be 0.02","duration":2.3044789999257773,"failureMessages":["AssertionError: expected '0.0000' to be '0.0200' // Object.is equality\n    at /app/lib/bigint.test.js:1718:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"failed","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","duration":2.2946440000087023,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0.00000000010000000000' // Object.is equality\n    at /app/lib/bigint.test.js:1725:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"failed","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","duration":1.4293710000347346,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:1769:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"failed","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","duration":1.9403119999915361,"failureMessages":["AssertionError: expected '0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1787:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","duration":1.9214989999309182,"failureMessages":["AssertionError: expected '0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1795:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","duration":1.3872559999581426,"failureMessages":["AssertionError: expected '0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1803:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"failed","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","duration":1.5272079999558628,"failureMessages":["AssertionError: expected '0' to be '3.33' // Object.is equality\n    at /app/lib/bigint.test.js:1811:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"failed","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","duration":1.7206330001354218,"failureMessages":["AssertionError: expected '0' to be '3.33333' // Object.is equality\n    at /app/lib/bigint.test.js:1819:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"failed","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","duration":1.575476000085473,"failureMessages":["AssertionError: expected '1' to be '0.125' // Object.is equality\n    at /app/lib/bigint.test.js:1827:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"failed","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","duration":1.7773289999458939,"failureMessages":["AssertionError: expected '0' to be '20' // Object.is equality\n    at /app/lib/bigint.test.js:1835:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","duration":1.5516999999526888,"failureMessages":["AssertionError: expected '0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1843:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","duration":1.240805999841541,"failureMessages":["AssertionError: expected '0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1851:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"failed","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","duration":1.294135000091046,"failureMessages":["AssertionError: expected '0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1859:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"failed","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","duration":1.4669449999928474,"failureMessages":["AssertionError: expected '0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1867:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"failed","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","duration":1.063198999967426,"failureMessages":["AssertionError: expected '0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1875:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"failed","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","duration":1.7144420000258833,"failureMessages":["AssertionError: expected '0' to be '123.45' // Object.is equality\n    at /app/lib/bigint.test.js:1883:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"passed","title":"Division of zero: 0 / 5 (DP=0) should be 0","duration":0.3667199998162687,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"passed","title":"Division by zero should throw error","duration":0.8659970001317561,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"passed","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","duration":0.8030189999844879,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"passed","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","duration":0.35589400003664196,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"passed","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","duration":0.3964990000240505,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"passed","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","duration":0.31577899982221425,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"passed","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","duration":0.5093200001865625,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"passed","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","duration":0.3393159999977797,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"passed","title":"Error Handling: Division by zero","duration":1.0268369999248534,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"passed","title":"Error Handling: TypeError for invalid divisor","duration":0.45820900006219745,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.6599600000772625,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":1.1823130000848323,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"passed","title":"5 / 10 => Q=0, R=5","duration":1.6125880000181496,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"passed","title":"0 / 5 => Q=0, R=0","duration":0.41735200001858175,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"failed","title":"12345 / 1 => Q=12345, R=0","duration":1.042741000186652,"failureMessages":["AssertionError: expected '0' to be '12345' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"failed","title":"10000 / 1 => Q=10000, R=0","duration":7.923792999936268,"failureMessages":["AssertionError: expected '0' to be '10000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"passed","title":"9999 / 10000 => Q=0, R=9999","duration":1.3829649998806417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"failed","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","duration":2.584709000075236,"failureMessages":["AssertionError: expected '121' to be '3750234389649353' // Object.is equality\n    at /app/lib/bigint.test.js:2165:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"failed","title":"123456 / 123 => Q=1003, R=87","duration":1.6076549999415874,"failureMessages":["AssertionError: expected '4' to be '1003' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"failed","title":"1000000 / 101 => Q=9900, R=100","duration":1.1796709999907762,"failureMessages":["AssertionError: expected '3' to be '9900' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"failed","title":"10 / 2 => Q=5, R=0","duration":1.0087589998729527,"failureMessages":["AssertionError: expected '0' to be '5' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"failed","title":"20 / 10 => Q=2, R=0","duration":1.010196999879554,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"failed","title":"100 / 10 => Q=10, R=0","duration":1.055439000017941,"failureMessages":["AssertionError: expected '0' to be '10' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"failed","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","duration":1.5154629999306053,"failureMessages":["AssertionError: expected '37986704' to be '12499999887' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"failed","title":"123 / 12345 => Q=0, R=123","duration":1.0820339999627322,"failureMessages":["AssertionError: expected '493' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"failed","title":"500000010 / 10000 => Q=50000, R=10","duration":1.165789999999106,"failureMessages":["AssertionError: expected '0' to be '50000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"failed","title":"99999 / 100 => Q=999, R=99","duration":1.184451000066474,"failureMessages":["AssertionError: expected '0' to be '999' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"failed","title":"60 / 10 => Q=6, R=0","duration":0.9973830000963062,"failureMessages":["AssertionError: expected '0' to be '6' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.3534750000108033,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"failed","title":"-10 / 3 => Q=-3, R=-1","duration":1.8018430001102388,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"failed","title":"10 / -3 => Q=-3, R=1","duration":1.0470559999812394,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"failed","title":"-10 / -3 => Q=3, R=-1","duration":1.6727839999366552,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":0.9739889998454601,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"failed","title":"-12 / 4 => Q=-3, R=0","duration":2.1209629999939352,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"failed","title":"12 / -4 => Q=-3, R=0","duration":1.2505980001296848,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"failed","title":"-12 / -4 => Q=3, R=0","duration":2.0982300001196563,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"passed","title":"5 / 10 => Q=0, R=5","duration":1.431626999983564,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"passed","title":"-5 / 10 => Q=0, R=-5","duration":2.6990639998111874,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"passed","title":"5 / -10 => Q=0, R=5","duration":1.2772570000961423,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"passed","title":"-5 / -10 => Q=0, R=-5","duration":3.2927360001485795,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"passed","title":"0 / 7 => Q=0, R=0","duration":0.5605499998200685,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"passed","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","duration":0.7120980001054704,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","duration":0.18510899995453656,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","duration":0.23845800012350082,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"passed","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","duration":0.20161899994127452,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","duration":0.20503300009295344,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"passed","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","duration":0.20042799995280802,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"passed","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","duration":0.1774480000603944,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"passed","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","duration":0.30194299994036555,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","duration":0.168301000026986,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","duration":0.18605699995532632,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","duration":0.17136500007472932,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"passed","title":"PE = 5: \"12345\" should be \"12345\"","duration":0.24800699995830655,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","duration":0.2065890000667423,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","duration":0.2101410001050681,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"passed","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","duration":0.2299430000130087,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"passed","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","duration":0.24737200001254678,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"passed","title":"NE = -2: \"0.012\" should be \"0.012\"","duration":0.2588740000501275,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","duration":0.2359310002066195,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"passed","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","duration":0.23507599998265505,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","duration":0.31769299996085465,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"passed","title":"NE = -3: \"0.0012\" should be \"0.0012\"","duration":0.27607899997383356,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","duration":0.20113099995069206,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","duration":0.14985099993646145,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"passed","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","duration":0.7221790000330657,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"passed","title":"positive dp: should truncate fractional part","duration":0.5466000000014901,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"passed","title":"negative dp: should make integer digits zero","duration":0.5019350000657141,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"passed","title":"negative numbers: should truncate towards zero","duration":0.8855320001021028,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.43361099995672703,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"passed","title":"positive dp: half rounds up (away from zero)","duration":0.7251170000527054,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"passed","title":"negative dp: half rounds up (away from zero in magnitude)","duration":0.6211640001274645,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"passed","title":"negative numbers: half rounds away from zero (more negative)","duration":0.4585619999561459,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.25347000011242926,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"passed","title":"positive dp: half to even","duration":0.4812699998728931,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"passed","title":"dp = 0: half to even","duration":0.407041999977082,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"passed","title":"negative numbers: half to even","duration":0.3062139998655766,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"passed","title":"positive numbers: away from zero","duration":0.5053789999801666,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"passed","title":"negative numbers: away from zero (more negative)","duration":0.26741499989293516,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"passed","title":"negative dp: away from zero","duration":0.2536710000131279,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"failed","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","duration":1.3564969999715686,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:2501:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}}],"startTime":1749768735048,"endTime":1749768735688.3564,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":339.73842600011267,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":308.1658550000284,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":154.5073239998892,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":155.0253289998509,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":86.4457050000783,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":119.12194800004363,"failureMessages":[],"meta":{}}],"startTime":1749768734990,"endTime":1749768736153.1218,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}