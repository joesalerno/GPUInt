// src/shaders/addition.frag
precision highp float; // Important for GPGPU

uniform sampler2D u_texture1; // Texture containing limbs of the first number (renamed for consistency)
uniform sampler2D u_texture2; // Texture containing limbs of the second number (renamed for consistency)
// Removed u_carryTexture uniform

uniform float u_base; // Base for calculations, supplied by JS

varying vec2 v_texCoord; // Texture coordinate, indicates which limb we're processing

void main() {
    // Read limbs from input textures
    // texture2D returns a vec4, we assume the limb is in the 'r' component
    float limb1 = texture2D(u_texture1, v_texCoord).r;
    float limb2 = texture2D(u_texture2, v_texCoord).r;
    // Removed carryIn from texture

    float sum = limb1 + limb2; // JS loop will handle carry propagation between these sums

    float resultLimb = mod(sum, u_base);
    float carryOut = floor(sum / u_base); // This is the carry generated by THIS limb's sum alone

    // Output the result limb and the new carry.
    // We can pack this into two components of gl_FragColor.
    // For example, resultLimb in .r and carryOut in .g
    // The other components (.b, .a) can be zero or used for other data.
    gl_FragColor = vec4(resultLimb, carryOut, 0.0, 1.0);
}
