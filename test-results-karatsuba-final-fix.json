{"numTotalTestSuites":60,"numPassedTestSuites":49,"numFailedTestSuites":11,"numPendingTestSuites":0,"numTotalTests":270,"numPassedTests":216,"numFailedTests":54,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749770166684,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"passed","title":"should create BigIntPrimitive for zero string \"0\"","duration":7.887275000102818,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"passed","title":"should create BigIntPrimitive for zero number 0","duration":2.0322670000605285,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"passed","title":"should handle empty string as zero","duration":2.0159510001540184,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.9149600001983345,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"passed","title":"should throw TypeError for invalid input types","duration":2.754865000024438,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"passed","title":"should parse valid integer strings","duration":2.7455079997889698,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"passed","title":"should parse valid decimal strings","duration":4.107243999838829,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"passed","title":"should parse scientific notation","duration":4.493290000129491,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"passed","title":"should normalize inputs","duration":4.326189000159502,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"passed","title":"should handle number input, including decimals","duration":2.9854509998112917,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"passed","title":"should handle copy constructor","duration":1.9926430000923574,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"passed","title":"should throw TypeError for invalid string formats","duration":3.0781589997932315,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.0644010002724826,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"passed","title":"should throw TypeError for non-finite numeric input","duration":1.9572189999744296,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"passed","title":"negate() should flip the sign of a positive number","duration":1.4896580004133284,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"passed","title":"negate() should flip the sign of a negative number","duration":0.8972350000403821,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"passed","title":"negate() should handle zero correctly","duration":0.9622229998931289,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"passed","title":"abs() should return positive for a negative number","duration":1.0529630002565682,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"passed","title":"abs() should return positive for a positive number","duration":0.6964559997431934,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"passed","title":"abs() should handle zero correctly","duration":0.91595199983567,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"passed","title":"isPositive() and isNegative() should work correctly","duration":1.5545749999582767,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"passed","title":"compareMagnitude() should correctly compare magnitudes","duration":1.8784250002354383,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"passed","title":"should correctly compare positive numbers","duration":1.0151280001737177,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"passed","title":"should correctly compare negative numbers","duration":0.9673649999313056,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"passed","title":"should correctly compare numbers with mixed signs","duration":0.6727570001967251,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"passed","title":"should correctly compare with zero","duration":2.494258999824524,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"passed","title":"should correctly compare large multi-limb numbers","duration":1.7685910002328455,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"passed","title":"should throw TypeError for invalid input type","duration":1.6911659999750555,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"passed","title":"should correctly evaluate equality","duration":1.3107870002277195,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.673885999713093,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"passed","title":"should correctly evaluate greater than","duration":1.5000530001707375,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.6674040001817048,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"passed","title":"should correctly evaluate greater than or equal","duration":1.4294239999726415,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.5975649999454618,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"passed","title":"should correctly evaluate less than","duration":1.2774729998782277,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.729437000118196,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"passed","title":"should correctly evaluate less than or equal","duration":1.38639000011608,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.6727740000933409,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"passed","title":"should convert simple BigIntPrimitive to string","duration":0.587731999810785,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"passed","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","duration":0.542812000028789,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"passed","title":"should convert single-digit number (single limb) to string","duration":0.4877030001953244,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"passed","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","duration":1.1777180000208318,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"passed","title":"should convert positive integer string to number","duration":0.7041980000212789,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"passed","title":"should convert negative integer string to number","duration":0.6067240000702441,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"passed","title":"should convert zero string to number zero","duration":0.527005999814719,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"passed","title":"should handle very large numbers with potential precision loss","duration":1.0494699999690056,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"passed","title":"should convert numbers at the edge of safe integer precision","duration":1.4208319997414947,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.8579099997878075,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"passed","title":"should work correctly with JSON.stringify()","duration":0.7871489999815822,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.924883000086993,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"passed","title":"should be used in string concatenation","duration":0.6232090000994503,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"passed","title":"should be used in template literals","duration":0.5489550000056624,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"passed","title":"should return true for zero","duration":0.49832100002095103,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"passed","title":"should return false for non-zero","duration":0.5080110002309084,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","duration":12.482352999970317,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","duration":7.194319000001997,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"passed","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","duration":6.8949029999785125,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"passed","title":"should handle adding zero to a number","duration":6.756610000040382,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"passed","title":"should add two multi-limb numbers with carries","duration":7.6677629998885095,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"passed","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","duration":7.0065770000219345,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"passed","title":"should handle positive - positive (a > b)","duration":2.4764149999246,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"passed","title":"should handle positive - positive (a < b)","duration":2.5531899998895824,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"passed","title":"should handle positive - positive (a == b)","duration":2.0729789999313653,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"passed","title":"should handle positive - negative","duration":7.219837999902666,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"passed","title":"should handle negative - positive","duration":10.110802999697626,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"passed","title":"should handle negative - negative (abs(a) > abs(b))","duration":0.8851849995553493,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"passed","title":"should handle negative - negative (abs(a) < abs(b))","duration":0.7646710001863539,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"passed","title":"should handle negative - negative (a == b)","duration":1.287187000270933,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"passed","title":"a - 0 = a","duration":0.7733859997242689,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"passed","title":"0 - a = -a","duration":0.7132269996218383,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"passed","title":"0 - (-a) = a","duration":2.36341999983415,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"passed","title":"0 - 0 = 0","duration":0.8194809998385608,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"passed","title":"should subtract two positive single-limb numbers, no borrow","duration":3.4518369999714196,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"passed","title":"should subtract with borrow handled by shader and JS propagation","duration":7.3255470003932714,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"passed","title":"should correctly subtract \"10000\" - \"1\"","duration":7.237677999772131,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"passed","title":"should subtract to zero","duration":5.1817169999703765,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"passed","title":"should handle multi-limb subtraction with borrows","duration":2.811730000190437,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"passed","title":"should return zero if limbValue is 0","duration":4.299726999830455,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"passed","title":"should return zero if otherNumber is zero","duration":2.641142999753356,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"passed","title":"limbValue * single-limb otherNumber, no final carry","duration":2.5577769996598363,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"passed","title":"limbValue * single-limb otherNumber, with final carry","duration":6.89699300006032,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, no JS propagated carry","duration":8.408683999907225,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, with JS propagated carry","duration":8.363344000186771,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"passed","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","duration":9.463091999758035,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"passed","title":"CPU: 5 * \"123\" = \"615\"","duration":3.5633350000716746,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"passed","title":"CPU: 9 * \"9\" = \"81\"","duration":3.277195999864489,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"passed","title":"CPU: 5 * \"1234\" = \"6170\"","duration":3.84817499993369,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"passed","title":"CPU: 0 * \"12345\" = \"0\"","duration":3.2783180000260472,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"passed","title":"CPU: 7 * \"0\" = \"0\"","duration":3.0289099998772144,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"passed","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","duration":3.0938200000673532,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"passed","title":"should return zero if num1 is zero","duration":3.0119619998149574,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"passed","title":"should return zero if num2 is zero","duration":2.9800889999605715,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"passed","title":"single-limb * single-limb","duration":9.93855799967423,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"passed","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","duration":4.826848999597132,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"passed","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","duration":9.094509999733418,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"passed","title":"123 * 45 = 5535","duration":11.107034999877214,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":4.646678999997675,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"passed","title":"a * 0 = 0","duration":4.146367999725044,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"passed","title":"0 * a = 0","duration":4.175970999989659,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"failed","title":"positive * positive = positive","duration":81.84069199999794,"failureMessages":["AssertionError: expected '500' to be '50' // Object.is equality\n    at /app/lib/bigint.test.js:1126:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"failed","title":"positive * negative = negative","duration":4.7990490002557635,"failureMessages":["AssertionError: expected '-500' to be '-50' // Object.is equality\n    at /app/lib/bigint.test.js:1135:67\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"failed","title":"negative * positive = negative","duration":2.5015199999324977,"failureMessages":["AssertionError: expected '-500' to be '-50' // Object.is equality\n    at /app/lib/bigint.test.js:1140:67\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"failed","title":"negative * negative = positive","duration":1.85152000002563,"failureMessages":["AssertionError: expected '500' to be '50' // Object.is equality\n    at /app/lib/bigint.test.js:1145:67\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"passed","title":"multiply result of zero should have positive sign","duration":1.0663819997571409,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"failed","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","duration":30185.583847999573,"failureMessages":["RangeError: Maximum call stack size exceeded\n    at Module.internalSpyOn (file:///app/node_modules/tinyspy/dist/index.js:102:23)\n    at Object.fn (file:///app/node_modules/@vitest/spy/dist/index.js:163:41)\n    at Proxy.<anonymous> (/app/lib/bigint.test.js:22:45)\n    at Proxy.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at Proxy.spy (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.add (/app/lib/bigint.js:369:108)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:578:33)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:580:42)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:580:42)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:580:42)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"failed","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","duration":3430.736138999928,"failureMessages":["AssertionError: expected 22 to be 30 // Object.is equality\n    at /app/lib/bigint.test.js:1197:51\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"passed","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","duration":1865.3705670000054,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"passed","title":"positive * positive = positive (forceCPU)","duration":1856.1434769998305,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"passed","title":"negative * positive = negative (forceCPU)","duration":1775.0956410001963,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"failed","title":"Karatsuba integration: large numbers with forceCPU","duration":3834.886256000027,"failureMessages":["RangeError: Maximum call stack size exceeded\n    at new BigIntPrimitive (/app/lib/bigint.js:25:14)\n    at BigIntPrimitive._multiply_limb_by_bigint (/app/lib/bigint.js:498:28)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive._multiply_limb_by_bigint (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive._core_multiply (/app/lib/bigint.js:515:44)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive._core_multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:564:38)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"passed","title":"RM_DOWN (0): should truncate to specified decimal places","duration":1876.5442639999092,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"passed","title":"RM_HALF_UP (1): placeholder for future tests","duration":1845.4437549998984,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"passed","title":"RM_HALF_EVEN (2): placeholder for future tests","duration":1708.030181999784,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"passed","title":"RM_UP (3): placeholder for future tests","duration":1812.2842879998498,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"passed","title":"Negative dp (rounding to powers of 10): placeholder","duration":1934.0576700000092,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"passed","title":"x.pow(0) should return 1","duration":1909.322306000162,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"passed","title":"x.pow(1) should return x","duration":1858.127324000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"passed","title":"0.pow(n) should return 0 for n > 0","duration":1843.2633140003309,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"passed","title":"1.pow(n) should return 1","duration":1850.7073920001276,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"passed","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","duration":1923.770601999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"passed","title":"should calculate simple positive base and exponent","duration":1868.3900319999084,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"passed","title":"should calculate negative base with even/odd exponent","duration":1884.0631800000556,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"passed","title":"should handle larger numbers and exponents","duration":1879.3578240000643,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"passed","title":"should use CPU path and respect forceCPU option","duration":1922.3992300000973,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"passed","title":"should throw TypeError for non-integer exponent","duration":1852.4729249998927,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"passed","title":"should throw TypeError for negative exponent","duration":1812.9760849997401,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"passed","title":"should throw Error for exponent too large","duration":1876.3670000000857,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"passed","title":"should return a copy when power is 0","duration":1903.7554009999149,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"passed","title":"should multiply by 10^1 (formerly BASE^1)","duration":1845.7822139998898,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"passed","title":"should multiply by 10^2 (formerly BASE^2)","duration":1869.2771580000408,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"passed","title":"should multiply multi-digit number by 10^3","duration":1833.8837919998914,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"passed","title":"should return zero if this is zero","duration":1874.9493189998902,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"passed","title":"should preserve sign for negative numbers","duration":1864.963660999667,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"passed","title":"should throw error if power is negative","duration":1877.7354860003106,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"passed","title":"should throw error if power is not an integer","duration":1857.0200920002535,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"passed","title":"should handle power of 0 for a zero number","duration":1856.5732460003346,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"passed","title":"should use CPU path when forceCPU is true for add()","duration":1900.2268229997717,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"passed","title":"should use CPU path when forceCPU is true for subtract()","duration":1865.023022999987,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"passed","title":"should use CPU path for multiply() when forceCPU is true","duration":1853.3897660002112,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"passed","title":"should throw TypeError when constructing with a number in strict mode","duration":0.611656999681145,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"passed","title":"should NOT throw when constructing with a string in strict mode","duration":1.2366859996691346,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"passed","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","duration":0.5049890000373125,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"passed","title":"should allow number construction if strict mode is explicitly set to false locally","duration":0.3382310001179576,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"passed","title":"should throw Error when valueOf() is called in strict mode","duration":0.48499400028958917,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"passed","title":"should NOT throw for valueOf() if strict mode is explicitly false","duration":0.439883999992162,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"passed","title":"should convert \"123\" to 123 without error in strict mode","duration":0.4182209996506572,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"passed","title":"should convert \"123.45\" to 123.45 without error in strict mode","duration":0.23771899985149503,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"passed","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","duration":0.3561529996804893,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"passed","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","duration":0.439799000043422,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"passed","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","duration":0.2466680002398789,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"passed","title":"should throw Error for numbers that lose precision with Number() conversion","duration":0.6533479997888207,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"passed","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","duration":0.2768389997072518,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"passed","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","duration":0.22745199967175722,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"passed","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","duration":0.2760160001926124,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"passed","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","duration":0.3686580001376569,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"passed","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","duration":0.41168299969285727,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"passed","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","duration":0.26803599996492267,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"passed","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","duration":0.29477000003680587,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"passed","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","duration":0.3135330001823604,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"passed","title":"should throw an error for negative numbers","duration":0.809426000341773,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"passed","title":"sqrt(0) should be 0","duration":0.24684600019827485,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"failed","title":"sqrt(1) should be 1","duration":12.840297000017017,"failureMessages":["AssertionError: expected '0' to be '1' // Object.is equality\n    at /app/lib/bigint.test.js:1672:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"failed","title":"sqrt(4) should be 2","duration":5.213809999637306,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at /app/lib/bigint.test.js:1678:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"failed","title":"sqrt(9) should be 3","duration":4.662064000032842,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at /app/lib/bigint.test.js:1684:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"failed","title":"sqrt(16) should be 4","duration":2.126482999883592,"failureMessages":["AssertionError: expected '0' to be '4' // Object.is equality\n    at /app/lib/bigint.test.js:1690:39\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"failed","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","duration":3.6414840002544224,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.41421356237309504880' // Object.is equality\n    at /app/lib/bigint.test.js:1697:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"failed","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","duration":2.3346130000427365,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.7320508075688772935' // Object.is equality\n    at /app/lib/bigint.test.js:1704:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"failed","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","duration":2.74251600028947,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '111.10805551353974002952' // Object.is equality\n    at /app/lib/bigint.test.js:1711:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"failed","title":"sqrt(0.0004) with DP=4 should be 0.02","duration":1.6223389999940991,"failureMessages":["AssertionError: expected '0.0000' to be '0.0200' // Object.is equality\n    at /app/lib/bigint.test.js:1718:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"failed","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","duration":2.0892179999500513,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0.00000000010000000000' // Object.is equality\n    at /app/lib/bigint.test.js:1725:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"failed","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","duration":1.1755389999598265,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:1769:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"failed","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","duration":1.4209790001623333,"failureMessages":["AssertionError: expected '0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1787:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","duration":1.6845329999923706,"failureMessages":["AssertionError: expected '0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1795:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","duration":1.4114719997160137,"failureMessages":["AssertionError: expected '0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1803:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"failed","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","duration":1.316136000212282,"failureMessages":["AssertionError: expected '0' to be '3.33' // Object.is equality\n    at /app/lib/bigint.test.js:1811:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"failed","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","duration":1.2356739998795092,"failureMessages":["AssertionError: expected '0' to be '3.33333' // Object.is equality\n    at /app/lib/bigint.test.js:1819:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"failed","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","duration":1.125533000100404,"failureMessages":["AssertionError: expected '1' to be '0.125' // Object.is equality\n    at /app/lib/bigint.test.js:1827:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"failed","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","duration":1.49487299984321,"failureMessages":["AssertionError: expected '0' to be '20' // Object.is equality\n    at /app/lib/bigint.test.js:1835:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","duration":1.05677800020203,"failureMessages":["AssertionError: expected '0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1843:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","duration":1.0822610002942383,"failureMessages":["AssertionError: expected '0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1851:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"failed","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","duration":1.0194779997691512,"failureMessages":["AssertionError: expected '0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1859:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"failed","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","duration":1.2843609997071326,"failureMessages":["AssertionError: expected '0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1867:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"failed","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","duration":1.033106000162661,"failureMessages":["AssertionError: expected '0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1875:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"failed","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","duration":1.1441250001080334,"failureMessages":["AssertionError: expected '0' to be '123.45' // Object.is equality\n    at /app/lib/bigint.test.js:1883:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"passed","title":"Division of zero: 0 / 5 (DP=0) should be 0","duration":0.24432200007140636,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"passed","title":"Division by zero should throw error","duration":0.43529100017622113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"passed","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","duration":0.8558290000073612,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"passed","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","duration":0.35660600010305643,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"passed","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","duration":0.33221299992874265,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"passed","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","duration":0.311903000343591,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"passed","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","duration":0.384184000082314,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"passed","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","duration":0.3521699998527765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"passed","title":"Error Handling: Division by zero","duration":1.1700950004160404,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"passed","title":"Error Handling: TypeError for invalid divisor","duration":0.6438330002129078,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.6807850003242493,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":1.1009599999524653,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"passed","title":"5 / 10 => Q=0, R=5","duration":1.4514179998077452,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"passed","title":"0 / 5 => Q=0, R=0","duration":0.4450910002924502,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"failed","title":"12345 / 1 => Q=12345, R=0","duration":0.9723799997009337,"failureMessages":["AssertionError: expected '0' to be '12345' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"failed","title":"10000 / 1 => Q=10000, R=0","duration":1.1816769996657968,"failureMessages":["AssertionError: expected '0' to be '10000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"passed","title":"9999 / 10000 => Q=0, R=9999","duration":1.1468690000474453,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"failed","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","duration":1.8431939999572933,"failureMessages":["AssertionError: expected '121' to be '3750234389649353' // Object.is equality\n    at /app/lib/bigint.test.js:2165:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"failed","title":"123456 / 123 => Q=1003, R=87","duration":1.1361790001392365,"failureMessages":["AssertionError: expected '4' to be '1003' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"failed","title":"1000000 / 101 => Q=9900, R=100","duration":1.1425499999895692,"failureMessages":["AssertionError: expected '3' to be '9900' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"failed","title":"10 / 2 => Q=5, R=0","duration":1.0450590001419187,"failureMessages":["AssertionError: expected '0' to be '5' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"failed","title":"20 / 10 => Q=2, R=0","duration":0.9725810000672936,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"failed","title":"100 / 10 => Q=10, R=0","duration":1.0607140003703535,"failureMessages":["AssertionError: expected '0' to be '10' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"failed","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","duration":1.5536379995755851,"failureMessages":["AssertionError: expected '37986704' to be '12499999887' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"failed","title":"123 / 12345 => Q=0, R=123","duration":1.1000629998743534,"failureMessages":["AssertionError: expected '493' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"failed","title":"500000010 / 10000 => Q=50000, R=10","duration":0.9368369998410344,"failureMessages":["AssertionError: expected '0' to be '50000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"failed","title":"99999 / 100 => Q=999, R=99","duration":1.0314090000465512,"failureMessages":["AssertionError: expected '0' to be '999' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"failed","title":"60 / 10 => Q=6, R=0","duration":0.9743269998580217,"failureMessages":["AssertionError: expected '0' to be '6' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.0181460003368556,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"failed","title":"-10 / 3 => Q=-3, R=-1","duration":1.9323080000467598,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"failed","title":"10 / -3 => Q=-3, R=1","duration":0.9730329997837543,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"failed","title":"-10 / -3 => Q=3, R=-1","duration":24.19224900007248,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":1.292905000038445,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"failed","title":"-12 / 4 => Q=-3, R=0","duration":2.1200000001117587,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"failed","title":"12 / -4 => Q=-3, R=0","duration":0.9704040000215173,"failureMessages":["AssertionError: expected '0' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"failed","title":"-12 / -4 => Q=3, R=0","duration":1.848517999984324,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"passed","title":"5 / 10 => Q=0, R=5","duration":1.2483800002373755,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"passed","title":"-5 / 10 => Q=0, R=-5","duration":2.7952580000273883,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"passed","title":"5 / -10 => Q=0, R=5","duration":1.1995489997789264,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"passed","title":"-5 / -10 => Q=0, R=-5","duration":2.8726439997553825,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"passed","title":"0 / 7 => Q=0, R=0","duration":0.6009029997512698,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"passed","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","duration":0.6674550003372133,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","duration":0.36805699998512864,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","duration":0.23571800021454692,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"passed","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","duration":0.15259099984541535,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","duration":0.16796799981966615,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"passed","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","duration":0.16989300027489662,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"passed","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","duration":0.15186099987477064,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"passed","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","duration":0.1322809997946024,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","duration":0.18557600025087595,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","duration":0.14287699991837144,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","duration":0.14740299992263317,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"passed","title":"PE = 5: \"12345\" should be \"12345\"","duration":0.19251800002530217,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","duration":0.17378300009295344,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","duration":0.24212600011378527,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"passed","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","duration":0.34501799987629056,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"passed","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","duration":0.19351999973878264,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"passed","title":"NE = -2: \"0.012\" should be \"0.012\"","duration":0.1696170000359416,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","duration":0.23796799965202808,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"passed","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","duration":0.17122499970719218,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","duration":0.196686000097543,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"passed","title":"NE = -3: \"0.0012\" should be \"0.0012\"","duration":0.1725980001501739,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","duration":0.13750800024718046,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","duration":0.22652799962088466,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"passed","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","duration":0.6427790001034737,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"passed","title":"positive dp: should truncate fractional part","duration":0.4201650000177324,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"passed","title":"negative dp: should make integer digits zero","duration":0.5614270004443824,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"passed","title":"negative numbers: should truncate towards zero","duration":0.36511099990457296,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.3368910001590848,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"passed","title":"positive dp: half rounds up (away from zero)","duration":0.9034480000846088,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"passed","title":"negative dp: half rounds up (away from zero in magnitude)","duration":0.5141670000739396,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"passed","title":"negative numbers: half rounds away from zero (more negative)","duration":0.37312000012025237,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.2363299997523427,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"passed","title":"positive dp: half to even","duration":0.48351600021123886,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"passed","title":"dp = 0: half to even","duration":0.3089159997180104,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"passed","title":"negative numbers: half to even","duration":0.331046000123024,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"passed","title":"positive numbers: away from zero","duration":0.3089149999432266,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"passed","title":"negative numbers: away from zero (more negative)","duration":0.35015999991446733,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"passed","title":"negative dp: away from zero","duration":0.2508880002424121,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"failed","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","duration":1.0577859999611974,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:2501:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}}],"startTime":1749770169967,"endTime":1749770267542.0579,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":327.9333969997242,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":383.9527860004455,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":240.1336379996501,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":286.4904390000738,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":134.8822260000743,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":223.58888000017032,"failureMessages":[],"meta":{}}],"startTime":1749770170036,"endTime":1749770171633.5889,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}