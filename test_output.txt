
> gpu-bigint@0.0.0 test
> vitest


 RUN  v3.2.3 /app

 ✓ |chromium| lib/bigint.test.js (35 tests) 46ms
 ❯ |chromium| lib/bigint.webgl.test.js (10 tests | 3 failed) 924ms
   ✓ BigIntPrimitive WebGL Operations > add() - WebGL Path > should add two small BigIntPrimitives using WebGL (e.g., "123" + "456" = "579") 28ms
   ✓ BigIntPrimitive WebGL Operations > add() - WebGL Path > should add two larger BigIntPrimitives requiring multiple limbs using WebGL (e.g., "8000" + "7000" = "15000") 16ms
   ✓ BigIntPrimitive WebGL Operations > add() - WebGL Path > should handle adding zero to a number using WebGL 45ms
   × BigIntPrimitive WebGL Operations > subtract() - WebGL Path > should subtract two positive single-limb numbers, no borrow (e.g., "567" - "123" = "444") 391ms
     → expected '0' to be '444' // Object.is equality
   × BigIntPrimitive WebGL Operations > subtract() - WebGL Path > should subtract with borrow (e.g., "123" - "34" = "89") 153ms
     → expected '0' to be '89' // Object.is equality
   ✓ BigIntPrimitive WebGL Operations > subtract() - WebGL Path > should handle subtracting to zero (e.g., "123" - "123" = "0") 16ms
   × BigIntPrimitive WebGL Operations > subtract() - WebGL Path > should handle subtracting a larger number from a smaller one (e.g., "100" - "200" = "-100") 137ms
     → expected '0' to be '-100' // Object.is equality
   ✓ BigIntPrimitive WebGL Operations > multiply() - WebGL Path (Simple Cases) > should multiply two small BigIntPrimitives using WebGL (e.g., "12" * "3" = "36") 80ms
   ✓ BigIntPrimitive WebGL Operations > multiply() - WebGL Path (Simple Cases) > should multiply with one number being zero using WebGL (e.g., "123" * "0" = "0") 1ms
   ✓ BigIntPrimitive WebGL Operations > multiply() - WebGL Path (Simple Cases) > should multiply two single-digit numbers using WebGL (e.g., "7" * "8" = "56") 55ms
 ✓ |chromium| src/App.test.jsx (6 tests) 794ms

 Test Files  1 failed | 2 passed (3)
      Tests  3 failed | 48 passed (51)
   Start at  05:11:15
   Duration  6.19s (transform 0ms, setup 824ms, collect 1.15s, tests 1.76s, environment 0ms, prepare 11.15s)
