{"numTotalTestSuites":65,"numPassedTestSuites":53,"numFailedTestSuites":12,"numPendingTestSuites":0,"numTotalTests":280,"numPassedTests":221,"numFailedTests":59,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749777373387,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"passed","title":"should create BigIntPrimitive for zero string \"0\"","duration":4.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"passed","title":"should create BigIntPrimitive for zero number 0","duration":0.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"passed","title":"should handle empty string as zero","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":2,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"passed","title":"should throw TypeError for invalid input types","duration":1.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"passed","title":"should parse valid integer strings","duration":1.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"passed","title":"should parse valid decimal strings","duration":1.199999999254942,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"passed","title":"should parse scientific notation","duration":1.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"passed","title":"should normalize inputs","duration":0.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"passed","title":"should handle number input, including decimals","duration":1.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"passed","title":"should handle copy constructor","duration":3,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"passed","title":"should throw TypeError for invalid string formats","duration":3.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"passed","title":"should throw TypeError for non-finite numeric input","duration":1.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"passed","title":"negate() should flip the sign of a positive number","duration":1.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"passed","title":"negate() should flip the sign of a negative number","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"passed","title":"negate() should handle zero correctly","duration":0.8999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"passed","title":"abs() should return positive for a negative number","duration":1.300000000745058,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"passed","title":"abs() should return positive for a positive number","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"passed","title":"abs() should handle zero correctly","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"passed","title":"isPositive() and isNegative() should work correctly","duration":1.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"passed","title":"compareMagnitude() should correctly compare magnitudes","duration":7.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"passed","title":"should correctly compare positive numbers","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"passed","title":"should correctly compare negative numbers","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"passed","title":"should correctly compare numbers with mixed signs","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"passed","title":"should correctly compare with zero","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"passed","title":"should correctly compare large multi-limb numbers","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"passed","title":"should throw TypeError for invalid input type","duration":0.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"passed","title":"should correctly evaluate equality","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"passed","title":"should correctly evaluate greater than","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.30000000074505806,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"passed","title":"should correctly evaluate greater than or equal","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"passed","title":"should correctly evaluate less than","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"passed","title":"should correctly evaluate less than or equal","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"passed","title":"should convert simple BigIntPrimitive to string","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"passed","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"passed","title":"should convert single-digit number (single limb) to string","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"passed","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","duration":0.6999999992549419,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"passed","title":"should convert positive integer string to number","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"passed","title":"should convert negative integer string to number","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"passed","title":"should convert zero string to number zero","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"passed","title":"should handle very large numbers with potential precision loss","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"passed","title":"should convert numbers at the edge of safe integer precision","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"passed","title":"should work correctly with JSON.stringify()","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"passed","title":"should be used in string concatenation","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"passed","title":"should be used in template literals","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"passed","title":"should return true for zero","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"passed","title":"should return false for non-zero","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","duration":3.199999999254942,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","duration":1.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"passed","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","duration":1.400000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"passed","title":"should handle adding zero to a number","duration":1.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"passed","title":"should add two multi-limb numbers with carries","duration":1.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"passed","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","duration":4.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"passed","title":"should handle positive - positive (a > b)","duration":2.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"passed","title":"should handle positive - positive (a < b)","duration":2.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"passed","title":"should handle positive - positive (a == b)","duration":2.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"passed","title":"should handle positive - negative","duration":5.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"passed","title":"should handle negative - positive","duration":5.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"passed","title":"should handle negative - negative (abs(a) > abs(b))","duration":2.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"passed","title":"should handle negative - negative (abs(a) < abs(b))","duration":3.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"passed","title":"should handle negative - negative (a == b)","duration":2.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"passed","title":"a - 0 = a","duration":2.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"passed","title":"0 - a = -a","duration":9.800000000745058,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"passed","title":"0 - (-a) = a","duration":6.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"passed","title":"0 - 0 = 0","duration":2.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"passed","title":"should subtract two positive single-limb numbers, no borrow","duration":7.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"passed","title":"should subtract with borrow handled by shader and JS propagation","duration":1.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"passed","title":"should correctly subtract \"10000\" - \"1\"","duration":1.300000000745058,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"passed","title":"should subtract to zero","duration":2.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"passed","title":"should handle multi-limb subtraction with borrows","duration":2,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"passed","title":"should return zero if limbValue is 0","duration":4,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"passed","title":"should return zero if otherNumber is zero","duration":4.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"passed","title":"limbValue * single-limb otherNumber, no final carry","duration":7.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"passed","title":"limbValue * single-limb otherNumber, with final carry","duration":18.600000000558794,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, no JS propagated carry","duration":9.799999999813735,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, with JS propagated carry","duration":8.799999999813735,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"passed","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","duration":8,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"passed","title":"CPU: 5 * \"123\" = \"615\"","duration":11.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"passed","title":"CPU: 9 * \"9\" = \"81\"","duration":18.299999999813735,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"passed","title":"CPU: 5 * \"1234\" = \"6170\"","duration":3.8999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"passed","title":"CPU: 0 * \"12345\" = \"0\"","duration":3.300000000745058,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"passed","title":"CPU: 7 * \"0\" = \"0\"","duration":2.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"passed","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","duration":2.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"passed","title":"should return zero if num1 is zero","duration":2.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"passed","title":"should return zero if num2 is zero","duration":2,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"passed","title":"single-limb * single-limb","duration":2.699999999254942,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"passed","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","duration":2.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"passed","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","duration":15,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"passed","title":"123 * 45 = 5535","duration":2.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":2.8999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"passed","title":"a * 0 = 0","duration":1.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"passed","title":"0 * a = 0","duration":1.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"passed","title":"positive * positive = positive","duration":1.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"passed","title":"positive * negative = negative","duration":1.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"passed","title":"negative * positive = negative","duration":2.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"passed","title":"negative * negative = positive","duration":2,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"passed","title":"multiply result of zero should have positive sign","duration":6.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"failed","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","duration":249.5,"failureMessages":["AssertionError: expected \"_core_multiply\" to be called 9 times, but got 1 times\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1183:33\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-multiply-----public-method-with-Karatsuba-and-sign-logic-should-use--core-multiply-for-numbers-smaller-than-KARATSUBA-THRESHOLD-1.png"}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"failed","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","duration":115,"failureMessages":["AssertionError: expected \"_splitAt\" to be called at least once\n    at Proxy.<anonymous> (http://localhost:63315/node_modules/@vitest/expect/dist/index.js?v=3f97bddb:1326:10)\n    at Proxy.<anonymous> (http://localhost:63315/node_modules/@vitest/expect/dist/index.js?v=3f97bddb:1022:14)\n    at Proxy.methodWrapper (http://localhost:63315/node_modules/.vite/vitest/da39a3ee5e6b4b0d3255bfef95601890afd80709/deps/chunk-LXDW44RB.js?v=3f97bddb:1537:25)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1216:28\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-multiply-----public-method-with-Karatsuba-and-sign-logic-should-use-Karatsuba-for-large-numbers--calls--splitAt-and--core-multiply-at-base--1.png"}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"passed","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","duration":2.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"failed","title":"positive * positive = positive (forceCPU)","duration":102.1000000005588,"failureMessages":["TypeError: Cannot redefine property: initWebGL\n    at Object.defineProperty (<anonymous>)\n    at define (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:13:10)\n    at reassign (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:134:76)\n    at Module.internalSpyOn (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:142:191)\n    at Object.spyOn (http://localhost:63315/node_modules/@vitest/spy/dist/index.js?v=3f97bddb:20:23)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1234:31\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-multiply-----public-method-with-Karatsuba-and-sign-logic-positive---positive---positive--forceCPU--1.png"}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"failed","title":"negative * positive = negative (forceCPU)","duration":116.29999999981374,"failureMessages":["TypeError: Cannot redefine property: initWebGL\n    at Object.defineProperty (<anonymous>)\n    at define (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:13:10)\n    at reassign (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:134:76)\n    at Module.internalSpyOn (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:142:191)\n    at Object.spyOn (http://localhost:63315/node_modules/@vitest/spy/dist/index.js?v=3f97bddb:20:23)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1245:31\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-multiply-----public-method-with-Karatsuba-and-sign-logic-negative---positive---negative--forceCPU--1.png"}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"failed","title":"Karatsuba integration: large numbers with forceCPU","duration":105.79999999981374,"failureMessages":["TypeError: Cannot redefine property: initWebGL\n    at Object.defineProperty (<anonymous>)\n    at define (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:13:10)\n    at reassign (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:134:76)\n    at Module.internalSpyOn (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:142:191)\n    at Object.spyOn (http://localhost:63315/node_modules/@vitest/spy/dist/index.js?v=3f97bddb:20:23)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1267:31\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-multiply-----public-method-with-Karatsuba-and-sign-logic-Karatsuba-integration--large-numbers-with-forceCPU-1.png"}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"passed","title":"RM_DOWN (0): should truncate to specified decimal places","duration":3.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"passed","title":"RM_HALF_UP (1): placeholder for future tests","duration":2.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"passed","title":"RM_HALF_EVEN (2): placeholder for future tests","duration":1.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"passed","title":"RM_UP (3): placeholder for future tests","duration":6.8999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"passed","title":"Negative dp (rounding to powers of 10): placeholder","duration":7.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"passed","title":"x.pow(0) should return 1","duration":8.100000000558794,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"passed","title":"x.pow(1) should return x","duration":8.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"passed","title":"0.pow(n) should return 0 for n > 0","duration":8.399999999441206,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"passed","title":"1.pow(n) should return 1","duration":7.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"passed","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","duration":7.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"passed","title":"should calculate simple positive base and exponent","duration":9.899999999441206,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"passed","title":"should calculate negative base with even/odd exponent","duration":4.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"passed","title":"should handle larger numbers and exponents","duration":1.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"failed","title":"should use CPU path and respect forceCPU option","duration":100.59999999962747,"failureMessages":["TypeError: Cannot redefine property: initWebGL\n    at Object.defineProperty (<anonymous>)\n    at define (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:13:10)\n    at reassign (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:134:76)\n    at Module.internalSpyOn (http://localhost:63315/node_modules/tinyspy/dist/index.js?v=3f97bddb:142:191)\n    at Object.spyOn (http://localhost:63315/node_modules/@vitest/spy/dist/index.js?v=3f97bddb:20:23)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1393:31\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/BigIntPrimitive-pow---should-use-CPU-path-and-respect-forceCPU-option-1.png"}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"passed","title":"should throw TypeError for non-integer exponent","duration":3.1000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"passed","title":"should throw TypeError for negative exponent","duration":1.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"passed","title":"should throw Error for exponent too large","duration":1.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"passed","title":"should return a copy when power is 0","duration":1.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"passed","title":"should multiply by 10^1 (formerly BASE^1)","duration":1.400000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"passed","title":"should multiply by 10^2 (formerly BASE^2)","duration":1.3999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"passed","title":"should multiply multi-digit number by 10^3","duration":5.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"passed","title":"should return zero if this is zero","duration":7.8999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"passed","title":"should preserve sign for negative numbers","duration":7.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"passed","title":"should throw error if power is negative","duration":9.899999999441206,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"passed","title":"should throw error if power is not an integer","duration":8.299999999813735,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"passed","title":"should handle power of 0 for a zero number","duration":7.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"passed","title":"should use CPU path when forceCPU is true for add()","duration":8,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"passed","title":"should use CPU path when forceCPU is true for subtract()","duration":7.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"passed","title":"should use CPU path for multiply() when forceCPU is true","duration":6.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"passed","title":"should throw TypeError when constructing with a number in strict mode","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"passed","title":"should NOT throw when constructing with a string in strict mode","duration":0.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"passed","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"passed","title":"should allow number construction if strict mode is explicitly set to false locally","duration":1.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"passed","title":"should throw Error when valueOf() is called in strict mode","duration":0.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"passed","title":"should NOT throw for valueOf() if strict mode is explicitly false","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"passed","title":"should convert \"123\" to 123 without error in strict mode","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"passed","title":"should convert \"123.45\" to 123.45 without error in strict mode","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"passed","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","duration":0.8000000007450581,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"passed","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"passed","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"passed","title":"should throw Error for numbers that lose precision with Number() conversion","duration":0.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"passed","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","duration":1.3999999994412065,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"passed","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"passed","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","duration":1.099999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"passed","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"passed","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"passed","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"passed","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"passed","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","duration":0.6000000005587935,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"passed","title":"should throw an error for negative numbers","duration":1.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"passed","title":"sqrt(0) should be 0","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"failed","title":"sqrt(1) should be 1","duration":124.40000000037253,"failureMessages":["AssertionError: expected '0' to be '1' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1692:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-1--should-be-1-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"failed","title":"sqrt(4) should be 2","duration":93.79999999981374,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1698:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-4--should-be-2-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"failed","title":"sqrt(9) should be 3","duration":111.30000000074506,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1704:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-9--should-be-3-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"failed","title":"sqrt(16) should be 4","duration":85.59999999962747,"failureMessages":["AssertionError: expected '0' to be '4' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1710:39\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-16--should-be-4-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"failed","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","duration":114.59999999962747,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.41421356237309504880' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1717:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-2--with-DP-20-should-be-1-41421356237309504880-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"failed","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","duration":85.59999999962747,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.7320508075688772935' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1724:37\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-3--with-DP-20-should-be-1-7320508075688772935-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"failed","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","duration":100.40000000037253,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '111.10805551353974002952' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1731:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-12345--with-DP-20-should-be-111-108055513539740030-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"failed","title":"sqrt(0.0004) with DP=4 should be 0.02","duration":100.5,"failureMessages":["AssertionError: expected '0.0000' to be '0.0200' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1738:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-0-0004--with-DP-4-should-be-0-02-1.png"}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"failed","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","duration":100,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0.00000000010000000000' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1745:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/sqrt---sqrt-very-small-number--sqrt-0-00000000000000000001--DP-20-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"failed","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","duration":99,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1789:13\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---DEBUG-TEST--10---4--DP-1---decimalDivide-raw-output-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"failed","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","duration":103.29999999981374,"failureMessages":["AssertionError: expected '0.0' to be '2.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1807:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---10---4--DP-1--RM-halfUp--should-be-2-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","duration":105.79999999981374,"failureMessages":["AssertionError: expected '0.0' to be '0.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1815:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---1---2--DP-1--RM-halfUp--should-be-0-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","duration":91.29999999981374,"failureMessages":["AssertionError: expected '0.0' to be '3.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1823:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---7---2--DP-1--RM-halfUp--should-be-3-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"failed","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","duration":100,"failureMessages":["AssertionError: expected '0.00' to be '3.33' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1831:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---10---3--DP-2--RM-halfUp--should-be-3-33-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"failed","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","duration":100.1000000005588,"failureMessages":["AssertionError: expected '0.00000' to be '3.33333' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1839:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---10---3--DP-5--RM-halfUp--should-be-3-33333-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"failed","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","duration":100.29999999981374,"failureMessages":["AssertionError: expected '1.000' to be '0.125' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1847:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---1---8--DP-3--RM-halfUp--should-be-0-125-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"failed","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","duration":115.5,"failureMessages":["AssertionError: expected '0' to be '20' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1855:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---10---0-5--DP-0--RM-halfUp--should-be-20-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","duration":95,"failureMessages":["AssertionError: expected '0.0' to be '3.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1863:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---10-5---3--DP-1--RM-halfUp--should-be-3-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","duration":88.70000000018626,"failureMessages":["AssertionError: expected '0.0' to be '0.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1871:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---0-25---0-5--DP-1--RM-halfUp--should-be-0-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"failed","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","duration":109,"failureMessages":["AssertionError: expected '0.0' to be '-2.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1879:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---Sign-handling----10----4--DP-1--should-be--2-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"failed","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","duration":103.5,"failureMessages":["AssertionError: expected '0.0' to be '-2.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1887:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---Sign-handling--10-----4---DP-1--should-be--2-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"failed","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","duration":115.5,"failureMessages":["AssertionError: expected '0.0' to be '2.5' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1895:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---Sign-handling----10------4---DP-1--should-be-2-5-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"failed","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","duration":117.80000000074506,"failureMessages":["AssertionError: expected '0.00' to be '123.45' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:1903:36\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/divide---Division-by-1--123-45---1--DP-2--should-be-123-45-1.png"}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"passed","title":"Division of zero: 0 / 5 (DP=0) should be 0","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"passed","title":"Division by zero should throw error","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"passed","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"passed","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","duration":0.30000000074505806,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"passed","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"passed","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"passed","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"passed","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"passed","title":"Error Handling: Division by zero","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"passed","title":"Error Handling: TypeError for invalid divisor","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":105.59999999962747,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--10---3----Q-3--R-1-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":104,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--12---4----Q-3--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":102.70000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--5---10----Q-0--R-5-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"passed","title":"0 / 5 => Q=0, R=0","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"failed","title":"12345 / 1 => Q=12345, R=0","duration":86.6000000005588,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '12345' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--12345---1----Q-12345--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"failed","title":"10000 / 1 => Q=10000, R=0","duration":100.20000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '10000' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--10000---1----Q-10000--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"failed","title":"9999 / 10000 => Q=0, R=9999","duration":111.29999999981374,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2158:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Basic-Cases--Positive-Integers--9999---10000----Q-0--R-9999-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"failed","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","duration":105.29999999981374,"failureMessages":["AssertionError: expected '121.00000000000000000000' to be '3750234389649353' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2185:37\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-20000000000000000000---5333----Q-3750234389649353--R-451-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"failed","title":"123456 / 123 => Q=1003, R=87","duration":95.20000000018626,"failureMessages":["AssertionError: expected '4.00000000000000000000' to be '1003' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-123456---123----Q-1003--R-87-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"failed","title":"1000000 / 101 => Q=9900, R=100","duration":105.5,"failureMessages":["AssertionError: expected '3.00000000000000000000' to be '9900' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-1000000---101----Q-9900--R-100-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"failed","title":"10 / 2 => Q=5, R=0","duration":108,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '5' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-10---2----Q-5--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"failed","title":"20 / 10 => Q=2, R=0","duration":94.40000000037253,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '2' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-20---10----Q-2--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"failed","title":"100 / 10 => Q=10, R=0","duration":96.79999999981374,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '10' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-100---10----Q-10--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"failed","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","duration":100.8999999994412,"failureMessages":["AssertionError: expected '37986704.00000000000000000000' to be '12499999887' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-12345678901234567890---987654321----Q-12499999887--R-339506163-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"failed","title":"123 / 12345 => Q=0, R=123","duration":98.5,"failureMessages":["AssertionError: expected '493.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-123---12345----Q-0--R-123-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"failed","title":"500000010 / 10000 => Q=50000, R=10","duration":100.6000000005588,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '50000' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-500000010---10000----Q-50000--R-10-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"failed","title":"99999 / 100 => Q=999, R=99","duration":100.09999999962747,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '999' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-99999---100----Q-999--R-99-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"failed","title":"60 / 10 => Q=6, R=0","duration":99.70000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '6' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2204:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Multi-Limb-Cases-60---10----Q-6--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":106.40000000037253,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-10---3----Q-3--R-1-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"failed","title":"-10 / 3 => Q=-3, R=-1","duration":95.09999999962747,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--10---3----Q--3--R--1-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"failed","title":"10 / -3 => Q=-3, R=1","duration":99.5,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-10----3----Q--3--R-1-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"failed","title":"-10 / -3 => Q=3, R=-1","duration":98.40000000037253,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--10----3----Q-3--R--1-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":103.79999999981374,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-12---4----Q-3--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"failed","title":"-12 / 4 => Q=-3, R=0","duration":97.20000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--12---4----Q--3--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"failed","title":"12 / -4 => Q=-3, R=0","duration":100.5,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-12----4----Q--3--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"failed","title":"-12 / -4 => Q=3, R=0","duration":99.70000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--12----4----Q-3--R-0-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":99.5,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-5---10----Q-0--R-5-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"failed","title":"-5 / 10 => Q=0, R=-5","duration":99.5,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--5---10----Q-0--R--5-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"failed","title":"5 / -10 => Q=0, R=5","duration":100.20000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling-5----10----Q-0--R-5-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"failed","title":"-5 / -10 => Q=0, R=-5","duration":100.70000000018626,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2083:33)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2230:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Division-and-Remainder-divideAndRemainder----divide----remainder---Public-Methods-Sign-Handling--5----10----Q-0--R--5-1.png"}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"passed","title":"0 / 7 => Q=0, R=0","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"passed","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"passed","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"passed","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"passed","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"passed","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"passed","title":"PE = 5: \"12345\" should be \"12345\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","duration":0.19999999925494194,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"passed","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"passed","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"passed","title":"NE = -2: \"0.012\" should be \"0.012\"","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"passed","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"passed","title":"NE = -3: \"0.0012\" should be \"0.0012\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"passed","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"passed","title":"positive dp: should truncate fractional part","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"passed","title":"negative dp: should make integer digits zero","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"passed","title":"negative numbers: should truncate towards zero","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"passed","title":"positive dp: half rounds up (away from zero)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"passed","title":"negative dp: half rounds up (away from zero in magnitude)","duration":0.39999999944120646,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"passed","title":"negative numbers: half rounds away from zero (more negative)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"passed","title":"positive dp: half to even","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"passed","title":"dp = 0: half to even","duration":0.10000000055879354,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"passed","title":"negative numbers: half to even","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"passed","title":"positive numbers: away from zero","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"passed","title":"negative numbers: away from zero (more negative)","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"passed","title":"negative dp: away from zero","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"failed","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","duration":93,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749777376059:2521:13\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=3f97bddb:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/Debug--decimalDivide-output-representation-DEBUG-TEST--should-correctly-represent-2-5-from--decimalDivide-for-10-4-1.png"}}],"startTime":1749777376668,"endTime":1749777383301,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should add two small BigIntPrimitives using WebGL (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives using WebGL (e.g., \"123\" + \"456\" = \"579\")","duration":23.09999999962747,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should add two larger BigIntPrimitives requiring multiple limbs using WebGL (e.g., \"8000\" + \"7000\" = \"15000\")","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs using WebGL (e.g., \"8000\" + \"7000\" = \"15000\")","duration":25.90000000037253,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should handle adding zero to a number using WebGL","status":"passed","title":"should handle adding zero to a number using WebGL","duration":22.199999999254942,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should subtract two positive single-limb numbers, no borrow (e.g., \"567\" - \"123\" = \"444\")","status":"passed","title":"should subtract two positive single-limb numbers, no borrow (e.g., \"567\" - \"123\" = \"444\")","duration":0.900000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should subtract with borrow (e.g., \"123\" - \"34\" = \"89\")","status":"passed","title":"should subtract with borrow (e.g., \"123\" - \"34\" = \"89\")","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should handle subtracting to zero (e.g., \"123\" - \"123\" = \"0\")","status":"passed","title":"should handle subtracting to zero (e.g., \"123\" - \"123\" = \"0\")","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should handle subtracting a larger number from a smaller one (e.g., \"100\" - \"200\" = \"-100\")","status":"passed","title":"should handle subtracting a larger number from a smaller one (e.g., \"100\" - \"200\" = \"-100\")","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) should multiply two small BigIntPrimitives using WebGL (e.g., \"12\" * \"3\" = \"36\")","status":"passed","title":"should multiply two small BigIntPrimitives using WebGL (e.g., \"12\" * \"3\" = \"36\")","duration":8.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) should multiply with one number being zero using WebGL (e.g., \"123\" * \"0\" = \"0\")","status":"passed","title":"should multiply with one number being zero using WebGL (e.g., \"123\" * \"0\" = \"0\")","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) should multiply two single-digit numbers using WebGL (e.g., \"7\" * \"8\" = \"56\")","status":"passed","title":"should multiply two single-digit numbers using WebGL (e.g., \"7\" * \"8\" = \"56\")","duration":11.800000000745058,"failureMessages":[],"meta":{}}],"startTime":1749777376475,"endTime":1749777376570.8,"status":"passed","message":"","name":"/app/lib/bigint.webgl.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":44.59999999962747,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":200.79999999981374,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":157.80000000074506,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":182.69999999925494,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":93.70000000018626,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":151.40000000037253,"failureMessages":[],"meta":{}}],"startTime":1749777376950,"endTime":1749777377782.4,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}