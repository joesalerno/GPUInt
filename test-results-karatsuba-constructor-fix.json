{"numTotalTestSuites":60,"numPassedTestSuites":50,"numFailedTestSuites":10,"numPendingTestSuites":0,"numTotalTests":270,"numPassedTests":243,"numFailedTests":27,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749769582359,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"passed","title":"should create BigIntPrimitive for zero string \"0\"","duration":5.46427799994126,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"passed","title":"should create BigIntPrimitive for zero number 0","duration":1.2419329998083413,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"passed","title":"should handle empty string as zero","duration":1.3142409999854863,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.4262170000001788,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"passed","title":"should throw TypeError for invalid input types","duration":1.336315999738872,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"passed","title":"should parse valid integer strings","duration":1.5685169999487698,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"passed","title":"should parse valid decimal strings","duration":2.1753549999557436,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"passed","title":"should parse scientific notation","duration":2.2094330000691116,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"passed","title":"should normalize inputs","duration":1.8997769998386502,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"passed","title":"should handle number input, including decimals","duration":1.6733389999717474,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"passed","title":"should handle copy constructor","duration":1.2690179999917746,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"passed","title":"should throw TypeError for invalid string formats","duration":2.1173349996097386,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":0.815231999848038,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"passed","title":"should throw TypeError for non-finite numeric input","duration":1.0268520000390708,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"passed","title":"negate() should flip the sign of a positive number","duration":0.9852760001085699,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"passed","title":"negate() should flip the sign of a negative number","duration":0.6085479999892414,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"passed","title":"negate() should handle zero correctly","duration":0.5032270001247525,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"passed","title":"abs() should return positive for a negative number","duration":0.6294980002567172,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"passed","title":"abs() should return positive for a positive number","duration":0.4756229999475181,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"passed","title":"abs() should handle zero correctly","duration":0.6788010001182556,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"passed","title":"isPositive() and isNegative() should work correctly","duration":1.1324849999509752,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"passed","title":"compareMagnitude() should correctly compare magnitudes","duration":1.5620260001160204,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"passed","title":"should correctly compare positive numbers","duration":0.7525410000234842,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"passed","title":"should correctly compare negative numbers","duration":0.740837000310421,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"passed","title":"should correctly compare numbers with mixed signs","duration":0.9089909996837378,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"passed","title":"should correctly compare with zero","duration":0.9605709998868406,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"passed","title":"should correctly compare large multi-limb numbers","duration":1.1430500000715256,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"passed","title":"should throw TypeError for invalid input type","duration":1.3181719998829067,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"passed","title":"should correctly evaluate equality","duration":0.8660450000315905,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.28183799982070923,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"passed","title":"should correctly evaluate greater than","duration":0.5660210000351071,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.30037100007757545,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"passed","title":"should correctly evaluate greater than or equal","duration":0.5255149998702109,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.2711350000463426,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"passed","title":"should correctly evaluate less than","duration":0.44008699990808964,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.3073740000836551,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"passed","title":"should correctly evaluate less than or equal","duration":0.5631980001926422,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.3276800001040101,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"passed","title":"should convert simple BigIntPrimitive to string","duration":0.501052999868989,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"passed","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","duration":0.511574000120163,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"passed","title":"should convert single-digit number (single limb) to string","duration":0.46216300036758184,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"passed","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","duration":0.9997100001201034,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"passed","title":"should convert positive integer string to number","duration":0.6594290002249181,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"passed","title":"should convert negative integer string to number","duration":0.4249450000934303,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"passed","title":"should convert zero string to number zero","duration":0.3534109997563064,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"passed","title":"should handle very large numbers with potential precision loss","duration":0.7512630000710487,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"passed","title":"should convert numbers at the edge of safe integer precision","duration":0.9231589999981225,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.7380619999021292,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"passed","title":"should work correctly with JSON.stringify()","duration":0.6146849999204278,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.8005079999566078,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"passed","title":"should be used in string concatenation","duration":0.4784639999270439,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"passed","title":"should be used in template literals","duration":0.4604239999316633,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"passed","title":"should return true for zero","duration":0.46424899995326996,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"passed","title":"should return false for non-zero","duration":0.45567099982872605,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","duration":6.783983000088483,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","duration":2.8682409999892116,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"passed","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","duration":2.5122030000202358,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"passed","title":"should handle adding zero to a number","duration":2.405084999743849,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"passed","title":"should add two multi-limb numbers with carries","duration":19.300394000019878,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"passed","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","duration":3.2002759999595582,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"passed","title":"should handle positive - positive (a > b)","duration":1.8095149998553097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"passed","title":"should handle positive - positive (a < b)","duration":1.4510500002652407,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"passed","title":"should handle positive - positive (a == b)","duration":1.134792999830097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"passed","title":"should handle positive - negative","duration":2.637719999998808,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"passed","title":"should handle negative - positive","duration":2.998850999865681,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"passed","title":"should handle negative - negative (abs(a) > abs(b))","duration":1.382780000101775,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"passed","title":"should handle negative - negative (abs(a) < abs(b))","duration":1.5354700000025332,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"passed","title":"should handle negative - negative (a == b)","duration":1.1757249999791384,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"passed","title":"a - 0 = a","duration":1.5086059998720884,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"passed","title":"0 - a = -a","duration":1.238171000033617,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"passed","title":"0 - (-a) = a","duration":5.2160479999147356,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"passed","title":"0 - 0 = 0","duration":1.2341570002026856,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"passed","title":"should subtract two positive single-limb numbers, no borrow","duration":2.8852090002037585,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"passed","title":"should subtract with borrow handled by shader and JS propagation","duration":2.6025490001775324,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"passed","title":"should correctly subtract \"10000\" - \"1\"","duration":2.4696130002848804,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"passed","title":"should subtract to zero","duration":2.9630350000225008,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"passed","title":"should handle multi-limb subtraction with borrows","duration":2.7256049998104572,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"passed","title":"should return zero if limbValue is 0","duration":3.4092769999988377,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"passed","title":"should return zero if otherNumber is zero","duration":2.714847999624908,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"passed","title":"limbValue * single-limb otherNumber, no final carry","duration":2.685399000067264,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"passed","title":"limbValue * single-limb otherNumber, with final carry","duration":2.7009920002892613,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, no JS propagated carry","duration":2.6912340000271797,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, with JS propagated carry","duration":2.8163459999486804,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"passed","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","duration":6.819128000177443,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"passed","title":"CPU: 5 * \"123\" = \"615\"","duration":1.5453969999216497,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"passed","title":"CPU: 9 * \"9\" = \"81\"","duration":1.4323360002599657,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"passed","title":"CPU: 5 * \"1234\" = \"6170\"","duration":1.204361999873072,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"passed","title":"CPU: 0 * \"12345\" = \"0\"","duration":1.3296550000086427,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"passed","title":"CPU: 7 * \"0\" = \"0\"","duration":1.1860129996202886,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"passed","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","duration":1.1300029996782541,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"passed","title":"should return zero if num1 is zero","duration":1.4853710001334548,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"passed","title":"should return zero if num2 is zero","duration":1.2627399996854365,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"passed","title":"single-limb * single-limb","duration":13.160872000269592,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"passed","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","duration":2.131087999790907,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"passed","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","duration":2.626749999821186,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"passed","title":"123 * 45 = 5535","duration":3.5612809997983277,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":1.4253090000711381,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"passed","title":"a * 0 = 0","duration":1.306586999911815,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"passed","title":"0 * a = 0","duration":1.0867059999145567,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"passed","title":"positive * positive = positive","duration":2.296176999807358,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"passed","title":"positive * negative = negative","duration":2.0307620000094175,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"passed","title":"negative * positive = negative","duration":2.075315000023693,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"passed","title":"negative * negative = positive","duration":2.0916679999791086,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"passed","title":"multiply result of zero should have positive sign","duration":2.1483570002019405,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"failed","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","duration":35.48024700023234,"failureMessages":["AssertionError: expected \"_core_multiply\" to be called 9 times, but got 1 times\n    at /app/lib/bigint.test.js:1163:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"failed","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","duration":7.159097000025213,"failureMessages":["AssertionError: expected \"_splitAt\" to be called at least once\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1326:10)\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1022:14)\n    at Proxy.methodWrapper (file:///app/node_modules/chai/chai.js:1618:25)\n    at /app/lib/bigint.test.js:1196:28\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"passed","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","duration":3.374644000083208,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"passed","title":"positive * positive = positive (forceCPU)","duration":9.588057999964803,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"passed","title":"negative * positive = negative (forceCPU)","duration":2.2654109997674823,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"failed","title":"Karatsuba integration: large numbers with forceCPU","duration":24.265442000236362,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:563:29)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at /app/lib/bigint.test.js:1252:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"passed","title":"RM_DOWN (0): should truncate to specified decimal places","duration":4.231819000095129,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"passed","title":"RM_HALF_UP (1): placeholder for future tests","duration":1.152092000003904,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"passed","title":"RM_HALF_EVEN (2): placeholder for future tests","duration":0.8161010001786053,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"passed","title":"RM_UP (3): placeholder for future tests","duration":0.7222559996880591,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"passed","title":"Negative dp (rounding to powers of 10): placeholder","duration":0.6352289998903871,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"passed","title":"x.pow(0) should return 1","duration":1.5430139997042716,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"passed","title":"x.pow(1) should return x","duration":1.4412409998476505,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"passed","title":"0.pow(n) should return 0 for n > 0","duration":1.0014289999380708,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"passed","title":"1.pow(n) should return 1","duration":1.153773999772966,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"passed","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","duration":2.3077489999122918,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"passed","title":"should calculate simple positive base and exponent","duration":5.636942999903113,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"passed","title":"should calculate negative base with even/odd exponent","duration":3.7757299998775125,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"passed","title":"should handle larger numbers and exponents","duration":19.00716600008309,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"passed","title":"should use CPU path and respect forceCPU option","duration":2.6044060001149774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"passed","title":"should throw TypeError for non-integer exponent","duration":1.4396950001828372,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"passed","title":"should throw TypeError for negative exponent","duration":0.9449450001120567,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"passed","title":"should throw Error for exponent too large","duration":0.8291050000116229,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"passed","title":"should return a copy when power is 0","duration":1.4565400001592934,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"passed","title":"should multiply by 10^1 (formerly BASE^1)","duration":0.9612830001860857,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"passed","title":"should multiply by 10^2 (formerly BASE^2)","duration":0.8777129999361932,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"passed","title":"should multiply multi-digit number by 10^3","duration":0.8624269999563694,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"passed","title":"should return zero if this is zero","duration":0.9360130000859499,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"passed","title":"should preserve sign for negative numbers","duration":0.9003649996593595,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"passed","title":"should throw error if power is negative","duration":1.9603039999492466,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"passed","title":"should throw error if power is not an integer","duration":1.419145000167191,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"passed","title":"should handle power of 0 for a zero number","duration":1.2096739998087287,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"passed","title":"should use CPU path when forceCPU is true for add()","duration":1.2737090000882745,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"passed","title":"should use CPU path when forceCPU is true for subtract()","duration":1.1895810002461076,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"passed","title":"should use CPU path for multiply() when forceCPU is true","duration":1.4567500003613532,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"passed","title":"should throw TypeError when constructing with a number in strict mode","duration":0.4407790000550449,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"passed","title":"should NOT throw when constructing with a string in strict mode","duration":0.7388779995962977,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"passed","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","duration":0.6091629997827113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"passed","title":"should allow number construction if strict mode is explicitly set to false locally","duration":0.48957099998369813,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"passed","title":"should throw Error when valueOf() is called in strict mode","duration":0.5755669996142387,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"passed","title":"should NOT throw for valueOf() if strict mode is explicitly false","duration":0.7179399998858571,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"passed","title":"should convert \"123\" to 123 without error in strict mode","duration":0.6101570003665984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"passed","title":"should convert \"123.45\" to 123.45 without error in strict mode","duration":0.47914599999785423,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"passed","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","duration":0.6143499999307096,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"passed","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","duration":0.6296650003641844,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"passed","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","duration":0.4965010001324117,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"passed","title":"should throw Error for numbers that lose precision with Number() conversion","duration":0.9576349998824298,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"passed","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","duration":0.47705100011080503,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"passed","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","duration":0.4232379999011755,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"passed","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","duration":0.4528859998099506,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"passed","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","duration":0.6680570002645254,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"passed","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","duration":0.6829629996791482,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"passed","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","duration":0.3663260000757873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"passed","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","duration":0.3608829998411238,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"passed","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","duration":0.8685349998995662,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"passed","title":"should throw an error for negative numbers","duration":0.9144879998639226,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"passed","title":"sqrt(0) should be 0","duration":0.4819149998947978,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"passed","title":"sqrt(1) should be 1","duration":2.526757000014186,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"passed","title":"sqrt(4) should be 2","duration":2.139515000395477,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"passed","title":"sqrt(9) should be 3","duration":6.211618999950588,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"passed","title":"sqrt(16) should be 4","duration":6.750524000264704,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"passed","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","duration":11.896800000220537,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"failed","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","duration":13.475686999969184,"failureMessages":["AssertionError: expected '1.73205080756887729353' to be '1.7320508075688772935' // Object.is equality\n    at /app/lib/bigint.test.js:1704:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"failed","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","duration":25.86060200026259,"failureMessages":["AssertionError: expected '111.10805551354051124500' to be '111.10805551353974002952' // Object.is equality\n    at /app/lib/bigint.test.js:1711:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"passed","title":"sqrt(0.0004) with DP=4 should be 0.02","duration":10.940893999766558,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"failed","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","duration":58.92764599993825,"failureMessages":["AssertionError: expected '0.00000000093489896607' to be '0.00000000010000000000' // Object.is equality\n    at /app/lib/bigint.test.js:1725:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"passed","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","duration":1.0942919999361038,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"passed","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","duration":0.6043760003522038,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"passed","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","duration":1.3643889999948442,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"passed","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","duration":0.6246030000038445,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"failed","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","duration":1.4576170002110302,"failureMessages":["AssertionError: expected '3.3333333' to be '3.33' // Object.is equality\n    at /app/lib/bigint.test.js:1811:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"failed","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","duration":1.5192309999838471,"failureMessages":["AssertionError: expected '3.3333333333' to be '3.33333' // Object.is equality\n    at /app/lib/bigint.test.js:1819:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"passed","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","duration":0.681230999995023,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"passed","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","duration":0.6742369998246431,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"passed","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","duration":0.6494789998978376,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"passed","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","duration":0.7576190000399947,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"passed","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","duration":0.6837160000577569,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"passed","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","duration":0.5762080000713468,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"passed","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","duration":0.6397130000405014,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"passed","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","duration":0.5538289998658001,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"passed","title":"Division of zero: 0 / 5 (DP=0) should be 0","duration":0.4497340000234544,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"passed","title":"Division by zero should throw error","duration":0.5872000004164875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"passed","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","duration":1.0130030000582337,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"passed","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","duration":0.7596610002219677,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"passed","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","duration":0.6369960000738502,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"passed","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","duration":0.5489650000818074,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"passed","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","duration":0.6216019997373223,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"passed","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","duration":0.5566109996289015,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"passed","title":"Error Handling: Division by zero","duration":1.192358000203967,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"passed","title":"Error Handling: TypeError for invalid divisor","duration":0.8316110000014305,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.5939829996787012,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"passed","title":"12 / 4 => Q=3, R=0","duration":1.940215999726206,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":0.9488639999181032,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"passed","title":"0 / 5 => Q=0, R=0","duration":0.9016530001536012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"failed","title":"12345 / 1 => Q=12345, R=0","duration":3.092428000178188,"failureMessages":["AssertionError: expected '60345' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2072:34)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"passed","title":"10000 / 1 => Q=10000, R=0","duration":1.6415780000388622,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"failed","title":"9999 / 10000 => Q=0, R=9999","duration":0.9773999997414649,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"failed","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","duration":1.0616409997455776,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at /app/lib/bigint.test.js:2163:50\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"failed","title":"123456 / 123 => Q=1003, R=87","duration":1.0274919997900724,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"failed","title":"1000000 / 101 => Q=9900, R=100","duration":0.9251140002161264,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"passed","title":"10 / 2 => Q=5, R=0","duration":2.009860999882221,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"passed","title":"20 / 10 => Q=2, R=0","duration":1.911183999851346,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"passed","title":"100 / 10 => Q=10, R=0","duration":1.8155290000140667,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"failed","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","duration":0.9634040002711117,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"failed","title":"123 / 12345 => Q=0, R=123","duration":0.9483639998361468,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"failed","title":"500000010 / 10000 => Q=50000, R=10","duration":3.5754229999147356,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"failed","title":"99999 / 100 => Q=999, R=99","duration":0.9080320000648499,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"passed","title":"60 / 10 => Q=6, R=0","duration":1.9865210000425577,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.0664369999431074,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"failed","title":"-10 / 3 => Q=-3, R=-1","duration":1.2784460000693798,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"failed","title":"10 / -3 => Q=-3, R=1","duration":1.0894590001553297,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"failed","title":"-10 / -3 => Q=3, R=-1","duration":0.9548180000856519,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"passed","title":"12 / 4 => Q=3, R=0","duration":2.024198000319302,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"passed","title":"-12 / 4 => Q=-3, R=0","duration":2.2196080000139773,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"passed","title":"12 / -4 => Q=-3, R=0","duration":1.9538819999434054,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"passed","title":"-12 / -4 => Q=3, R=0","duration":2.033727000001818,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":0.971390999853611,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"failed","title":"-5 / 10 => Q=0, R=-5","duration":0.9299599998630583,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"failed","title":"5 / -10 => Q=0, R=5","duration":1.0111760003492236,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"failed","title":"-5 / -10 => Q=0, R=-5","duration":0.9125290000811219,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:546:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.divideAndRemainder (/app/lib/bigint.js:778:30)\n    at checkDivRem (/app/lib/bigint.test.js:2061:46)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"passed","title":"0 / 7 => Q=0, R=0","duration":1.1347520002163947,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"passed","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","duration":1.1133010000921786,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","duration":0.38667199993506074,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","duration":0.7586179999634624,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"passed","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","duration":0.3526059999130666,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","duration":0.3328430000692606,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"passed","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","duration":0.29311500024050474,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"passed","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","duration":0.3403520002029836,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"passed","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","duration":0.30199299985542893,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","duration":0.29366999957710505,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","duration":0.3312820000573993,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","duration":0.6653559999540448,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"passed","title":"PE = 5: \"12345\" should be \"12345\"","duration":0.43181899981573224,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","duration":0.35203800024464726,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","duration":0.36138599971309304,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"passed","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","duration":0.33518399996683,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"passed","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","duration":0.317975000012666,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"passed","title":"NE = -2: \"0.012\" should be \"0.012\"","duration":0.3691710000857711,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","duration":0.3215640000998974,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"passed","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","duration":0.2992019997909665,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","duration":0.34820699971169233,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"passed","title":"NE = -3: \"0.0012\" should be \"0.0012\"","duration":0.4126269998960197,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","duration":0.40516100032255054,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","duration":0.307479000184685,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"passed","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","duration":0.8542300001718104,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"passed","title":"positive dp: should truncate fractional part","duration":0.9466889998875558,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"passed","title":"negative dp: should make integer digits zero","duration":1.0416230000555515,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"passed","title":"negative numbers: should truncate towards zero","duration":0.795976999681443,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.6524940002709627,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"passed","title":"positive dp: half rounds up (away from zero)","duration":1.071743999607861,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"passed","title":"negative dp: half rounds up (away from zero in magnitude)","duration":1.045386000070721,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"passed","title":"negative numbers: half rounds away from zero (more negative)","duration":0.9760170001536608,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.40992100024595857,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"passed","title":"positive dp: half to even","duration":0.8303999998606741,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"passed","title":"dp = 0: half to even","duration":0.7045790003612638,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"passed","title":"negative numbers: half to even","duration":0.5830829995684326,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"passed","title":"positive numbers: away from zero","duration":0.8292540004476905,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"passed","title":"negative numbers: away from zero (more negative)","duration":0.6254549999721348,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"passed","title":"negative dp: away from zero","duration":0.5768369999714196,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"passed","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","duration":0.6422610003501177,"failureMessages":[],"meta":{}}],"startTime":1749769584360,"endTime":1749769584953.6423,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":242.6066189999692,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":222.85341500025243,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":149.09156299987808,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":159.07120200013742,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":79.41673900000751,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":115.38898100005463,"failureMessages":[],"meta":{}}],"startTime":1749769584430,"endTime":1749769585399.389,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}