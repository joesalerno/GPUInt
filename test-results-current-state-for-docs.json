{"numTotalTestSuites":25,"numPassedTestSuites":19,"numFailedTestSuites":6,"numPendingTestSuites":0,"numTotalTests":285,"numPassedTests":269,"numFailedTests":16,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749965019463,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should correctly initialize from a positive integer string","status":"passed","title":"should correctly initialize from a positive integer string","duration":3.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should correctly initialize from a negative integer string","status":"passed","title":"should correctly initialize from a negative integer string","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should correctly initialize from \"0\"","status":"passed","title":"should correctly initialize from \"0\"","duration":3.6999999997206032,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 123 and 45 to get 168 (simple addition) using CPU path","status":"passed","title":"should add 123 and 45 to get 168 (simple addition) using CPU path","duration":3,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 12345 and 67890 to get 80235 (simple addition larger numbers) using CPU path","status":"passed","title":"should add 12345 and 67890 to get 80235 (simple addition larger numbers) using CPU path","duration":2.6999999997206032,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 99 and 1 to get 100 (carry to next limb (BASE 10000 implies smaller carries)) using CPU path","status":"passed","title":"should add 99 and 1 to get 100 (carry to next limb (BASE 10000 implies smaller carries)) using CPU path","duration":1.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 9999 and 1 to get 10000 (carry to new limb (9999 + 1 = 10000)) using CPU path","status":"passed","title":"should add 9999 and 1 to get 10000 (carry to new limb (9999 + 1 = 10000)) using CPU path","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 1 and 9999 to get 10000 (carry to new limb (1 + 9999 = 10000)) using CPU path","status":"passed","title":"should add 1 and 9999 to get 10000 (carry to new limb (1 + 9999 = 10000)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 8765 and 1235 to get 10000 (8765 + 1235 = 10000) using CPU path","status":"passed","title":"should add 8765 and 1235 to get 10000 (8765 + 1235 = 10000) using CPU path","duration":1.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 123 and 0 to get 123 (a + 0) using CPU path","status":"passed","title":"should add 123 and 0 to get 123 (a + 0) using CPU path","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 0 and 123 to get 123 (0 + a) using CPU path","status":"passed","title":"should add 0 and 123 to get 123 (0 + a) using CPU path","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 0 and 0 to get 0 (0 + 0) using CPU path","status":"passed","title":"should add 0 and 0 to get 0 (0 + 0) using CPU path","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -123 and -45 to get -168 (negative + negative) using CPU path","status":"passed","title":"should add -123 and -45 to get -168 (negative + negative) using CPU path","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -99 and -1 to get -100 (negative + negative with carry) using CPU path","status":"passed","title":"should add -99 and -1 to get -100 (negative + negative with carry) using CPU path","duration":1.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 123 and -45 to get 78 (positive + negative (result positive)) using CPU path","status":"passed","title":"should add 123 and -45 to get 78 (positive + negative (result positive)) using CPU path","duration":3.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 45 and -123 to get -78 (positive + negative (result negative)) using CPU path","status":"passed","title":"should add 45 and -123 to get -78 (positive + negative (result negative)) using CPU path","duration":0.8000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 123 and -123 to get 0 (positive + negative (result zero)) using CPU path","status":"passed","title":"should add 123 and -123 to get 0 (positive + negative (result zero)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -123 and 45 to get -78 (negative + positive (result negative)) using CPU path","status":"passed","title":"should add -123 and 45 to get -78 (negative + positive (result negative)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -45 and 123 to get 78 (negative + positive (result positive)) using CPU path","status":"passed","title":"should add -45 and 123 to get 78 (negative + positive (result positive)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -123 and 123 to get 0 (negative + positive (result zero)) using CPU path","status":"passed","title":"should add -123 and 123 to get 0 (negative + positive (result zero)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 1.23 and 0.0045 to get 1.2345 (1.23 + 0.0045) using CPU path","status":"passed","title":"should add 1.23 and 0.0045 to get 1.2345 (1.23 + 0.0045) using CPU path","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 123e2 and 45e-1 to get 12304.5 (12300 + 4.5) using CPU path","status":"passed","title":"should add 123e2 and 45e-1 to get 12304.5 (12300 + 4.5) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 1.2345 and 2 to get 3.2345 (1.2345 + 2) using CPU path","status":"passed","title":"should add 1.2345 and 2 to get 3.2345 (1.2345 + 2) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 200 and 0.05 to get 200.05 (200 + 0.05) using CPU path","status":"passed","title":"should add 200 and 0.05 to get 200.05 (200 + 0.05) using CPU path","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -1.23 and -0.0045 to get -1.2345 (-1.23 + -0.0045) using CPU path","status":"passed","title":"should add -1.23 and -0.0045 to get -1.2345 (-1.23 + -0.0045) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 1.23 and -0.0045 to get 1.2255 (1.23 + -0.0045) using CPU path","status":"passed","title":"should add 1.23 and -0.0045 to get 1.2255 (1.23 + -0.0045) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add -1.23 and 0.0045 to get -1.2255 (-1.23 + 0.0045) using CPU path","status":"passed","title":"should add -1.23 and 0.0045 to get -1.2255 (-1.23 + 0.0045) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 10000 and 0.0001 to get 10000.0001 (large num + small fraction) using CPU path","status":"passed","title":"should add 10000 and 0.0001 to get 10000.0001 (large num + small fraction) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive add() - public method with sign logic and CPU path should add 0.0001 and 10000 to get 10000.0001 (small fraction + large num) using CPU path","status":"passed","title":"should add 0.0001 and 10000 to get 10000.0001 (small fraction + large num) using CPU path","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 45 from 123 to get 78 (a > b (123 - 45 = 78)) using CPU path","status":"passed","title":"should subtract 45 from 123 to get 78 (a > b (123 - 45 = 78)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 123 from 45 to get -78 (a < b (45 - 123 = -78)) using CPU path","status":"passed","title":"should subtract 123 from 45 to get -78 (a < b (45 - 123 = -78)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 123 from 123 to get 0 (a = b (123 - 123 = 0)) using CPU path","status":"passed","title":"should subtract 123 from 123 to get 0 (a = b (123 - 123 = 0)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 1 from 100 to get 99 (borrow (100 - 1 = 99)) using CPU path","status":"passed","title":"should subtract 1 from 100 to get 99 (borrow (100 - 1 = 99)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 1 from 10000 to get 9999 (borrow across limbs (10000 - 1 = 9999)) using CPU path","status":"passed","title":"should subtract 1 from 10000 to get 9999 (borrow across limbs (10000 - 1 = 9999)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 6789 from 12345 to get 5556 (borrow internal (12345 - 6789 = 5556)) using CPU path","status":"passed","title":"should subtract 6789 from 12345 to get 5556 (borrow internal (12345 - 6789 = 5556)) using CPU path","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 0 from 123 to get 123 (a - 0) using CPU path","status":"passed","title":"should subtract 0 from 123 to get 123 (a - 0) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 123 from 0 to get -123 (0 - a) using CPU path","status":"passed","title":"should subtract 123 from 0 to get -123 (0 - a) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 0 from 0 to get 0 (0 - 0) using CPU path","status":"passed","title":"should subtract 0 from 0 to get 0 (0 - 0) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract -45 from -123 to get -78 (-a - -b (-123 - (-45) = -78)) using CPU path","status":"passed","title":"should subtract -45 from -123 to get -78 (-a - -b (-123 - (-45) = -78)) using CPU path","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract -123 from -45 to get 78 (-a - -b (-45 - (-123) = 78)) using CPU path","status":"passed","title":"should subtract -123 from -45 to get 78 (-a - -b (-45 - (-123) = 78)) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract -45 from 123 to get 168 (a - -b (123 - (-45) = 168)) using CPU path","status":"passed","title":"should subtract -45 from 123 to get 168 (a - -b (123 - (-45) = 168)) using CPU path","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 45 from -123 to get -168 (-a - b (-123 - 45 = -168)) using CPU path","status":"passed","title":"should subtract 45 from -123 to get -168 (-a - b (-123 - 45 = -168)) using CPU path","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 0.0045 from 1.23 to get 1.2255 (1.23 - 0.0045) using CPU path","status":"passed","title":"should subtract 0.0045 from 1.23 to get 1.2255 (1.23 - 0.0045) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 1.23 from 0.0045 to get -1.2255 (0.0045 - 1.23) using CPU path","status":"passed","title":"should subtract 1.23 from 0.0045 to get -1.2255 (0.0045 - 1.23) using CPU path","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 45e-1 from 123e2 to get 12295.5 (12300 - 4.5) using CPU path","status":"passed","title":"should subtract 45e-1 from 123e2 to get 12295.5 (12300 - 4.5) using CPU path","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 2 from 1.2345 to get -0.7655 (1.2345 - 2) using CPU path","status":"passed","title":"should subtract 2 from 1.2345 to get -0.7655 (1.2345 - 2) using CPU path","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 0.05 from 200 to get 199.95 (200 - 0.05) using CPU path","status":"passed","title":"should subtract 0.05 from 200 to get 199.95 (200 - 0.05) using CPU path","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract -0.0045 from -1.23 to get -1.2255 (-1.23 - (-0.0045)) using CPU path","status":"passed","title":"should subtract -0.0045 from -1.23 to get -1.2255 (-1.23 - (-0.0045)) using CPU path","duration":0.40000000037252903,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract -0.0045 from 1.23 to get 1.2345 (1.23 - (-0.0045)) using CPU path","status":"passed","title":"should subtract -0.0045 from 1.23 to get 1.2345 (1.23 - (-0.0045)) using CPU path","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic and CPU path"],"fullName":"BigIntPrimitive subtract() - public method with sign logic and CPU path should subtract 0.0045 from -1.23 to get -1.2345 (-1.23 - 0.0045) using CPU path","status":"passed","title":"should subtract 0.0045 from -1.23 to get -1.2345 (-1.23 - 0.0045) using CPU path","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply 123 and 45 to get 5535 (simple integer multiplication)","status":"passed","title":"should multiply 123 and 45 to get 5535 (simple integer multiplication)","duration":1.1000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply 123 and 0 to get 0 (multiply by zero (a * 0))","status":"passed","title":"should multiply 123 and 0 to get 0 (multiply by zero (a * 0))","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply 0 and 45 to get 0 (multiply by zero (0 * a))","status":"passed","title":"should multiply 0 and 45 to get 0 (multiply by zero (0 * a))","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply 123 and 1 to get 123 (multiply by one (a * 1))","status":"passed","title":"should multiply 123 and 1 to get 123 (multiply by one (a * 1))","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply -123 and 45 to get -5535 (negative * positive)","status":"passed","title":"should multiply -123 and 45 to get -5535 (negative * positive)","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply -123 and -45 to get 5535 (negative * negative)","status":"passed","title":"should multiply -123 and -45 to get 5535 (negative * negative)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: true"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: true should multiply 1.2 and 0.5 to get 0.6 (simple decimal multiplication (1.2 * 0.5 = 0.6))","status":"passed","title":"should multiply 1.2 and 0.5 to get 0.6 (simple decimal multiplication (1.2 * 0.5 = 0.6))","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply 123 and 45 to get 5535 (simple integer multiplication)","status":"passed","title":"should multiply 123 and 45 to get 5535 (simple integer multiplication)","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply 123 and 0 to get 0 (multiply by zero (a * 0))","status":"passed","title":"should multiply 123 and 0 to get 0 (multiply by zero (a * 0))","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply 0 and 45 to get 0 (multiply by zero (0 * a))","status":"passed","title":"should multiply 0 and 45 to get 0 (multiply by zero (0 * a))","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply 123 and 1 to get 123 (multiply by one (a * 1))","status":"passed","title":"should multiply 123 and 1 to get 123 (multiply by one (a * 1))","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply -123 and 45 to get -5535 (negative * positive)","status":"passed","title":"should multiply -123 and 45 to get -5535 (negative * positive)","duration":1.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply -123 and -45 to get 5535 (negative * negative)","status":"passed","title":"should multiply -123 and -45 to get 5535 (negative * negative)","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic","with forceCPU: false"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic with forceCPU: false should multiply 1.2 and 0.5 to get 0.6 (simple decimal multiplication (1.2 * 0.5 = 0.6))","status":"passed","title":"should multiply 1.2 and 0.5 to get 0.6 (simple decimal multiplication (1.2 * 0.5 = 0.6))","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should return a new BigIntPrimitive instance","status":"passed","title":"should return a new BigIntPrimitive instance","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 2 by BigInt 1234 to get 2468 (simple multiplication)","status":"passed","title":"should correctly multiply limb 2 by BigInt 1234 to get 2468 (simple multiplication)","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 0 by BigInt 1234 to get 0 (limb is zero)","status":"passed","title":"should correctly multiply limb 0 by BigInt 1234 to get 0 (limb is zero)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 1234 by BigInt 0 to get 0 (number is zero)","status":"passed","title":"should correctly multiply limb 1234 by BigInt 0 to get 0 (number is zero)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 1 by BigInt 9876 to get 9876 (limb is one)","status":"passed","title":"should correctly multiply limb 1 by BigInt 9876 to get 9876 (limb is one)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 5000 by BigInt 3 to get 15000 (result requires carry to new limb (BASE 10000))","status":"passed","title":"should correctly multiply limb 5000 by BigInt 3 to get 15000 (result requires carry to new limb (BASE 10000))","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 2 by BigInt 1000020000 to get 2000040000 (number with multiple limbs)","status":"passed","title":"should correctly multiply limb 2 by BigInt 1000020000 to get 2000040000 (number with multiple limbs)","duration":0.8999999999068677,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint()"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() should correctly multiply limb 10000 by BigInt 1 to get 10000 (limb is BASE (should be handled as 1*BASE + 0))","status":"passed","title":"should correctly multiply limb 10000 by BigInt 1 to get 10000 (limb is BASE (should be handled as 1*BASE + 0))","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 123 and 45 to get 5535 (simple integers)","status":"passed","title":"should correctly multiply 123 and 45 to get 5535 (simple integers)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 6789 and 12345 to get 83810205 (multi-limb order swap)","status":"passed","title":"should correctly multiply 6789 and 12345 to get 83810205 (multi-limb order swap)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 123 and 0 to get 0 (multiply by zero)","status":"passed","title":"should correctly multiply 123 and 0 to get 0 (multiply by zero)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 0 and 456 to get 0 (zero multiply by number)","status":"passed","title":"should correctly multiply 0 and 456 to get 0 (zero multiply by number)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 123 and 1 to get 123 (multiply by one)","status":"passed","title":"should correctly multiply 123 and 1 to get 123 (multiply by one)","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 1 and 456 to get 456 (one multiply by number)","status":"passed","title":"should correctly multiply 1 and 456 to get 456 (one multiply by number)","duration":2.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 10000 and 10000 to get 100000000 (BASE * BASE)","status":"passed","title":"should correctly multiply 10000 and 10000 to get 100000000 (BASE * BASE)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply 9999 and 9999 to get 99980001 (max limb * max limb)","status":"passed","title":"should correctly multiply 9999 and 9999 to get 99980001 (max limb * max limb)","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12345\" at index 3 (mode 0, neg false) to \"123\"","status":"passed","title":"should round \"12345\" at index 3 (mode 0, neg false) to \"123\"","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12300\" at index 3 (mode 0, neg false) to \"123\"","status":"passed","title":"should round \"12300\" at index 3 (mode 0, neg false) to \"123\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12399\" at index 3 (mode 0, neg false) to \"123\"","status":"passed","title":"should round \"12399\" at index 3 (mode 0, neg false) to \"123\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"5\" at index 0 (mode 0, neg false) to \"0\"","status":"passed","title":"should round \"5\" at index 0 (mode 0, neg false) to \"0\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"123\" at index 0 (mode 0, neg false) to \"0\"","status":"passed","title":"should round \"123\" at index 0 (mode 0, neg false) to \"0\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"123\" at index 1 (mode 0, neg false) to \"1\"","status":"passed","title":"should round \"123\" at index 1 (mode 0, neg false) to \"1\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"123\" at index 2 (mode 0, neg false) to \"12\"","status":"passed","title":"should round \"123\" at index 2 (mode 0, neg false) to \"12\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"123\" at index 3 (mode 0, neg false) to \"123\"","status":"passed","title":"should round \"123\" at index 3 (mode 0, neg false) to \"123\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"0\" at index 0 (mode 0, neg false) to \"0\"","status":"passed","title":"should round \"0\" at index 0 (mode 0, neg false) to \"0\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12345\" at index 3 (mode 1, neg false) to \"123\"","status":"passed","title":"should round \"12345\" at index 3 (mode 1, neg false) to \"123\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12350\" at index 3 (mode 1, neg false) to \"124\"","status":"passed","title":"should round \"12350\" at index 3 (mode 1, neg false) to \"124\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12399\" at index 3 (mode 1, neg true) to \"124\"","status":"passed","title":"should round \"12399\" at index 3 (mode 1, neg true) to \"124\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"5\" at index 0 (mode 1, neg false) to \"1\"","status":"passed","title":"should round \"5\" at index 0 (mode 1, neg false) to \"1\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"4\" at index 0 (mode 1, neg false) to \"0\"","status":"passed","title":"should round \"4\" at index 0 (mode 1, neg false) to \"0\"","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"99\" at index 0 (mode 1, neg false) to \"1\"","status":"passed","title":"should round \"99\" at index 0 (mode 1, neg false) to \"1\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"199\" at index 1 (mode 1, neg false) to \"2\"","status":"passed","title":"should round \"199\" at index 1 (mode 1, neg false) to \"2\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12250\" at index 3 (mode 2, neg false) to \"122\"","status":"passed","title":"should round \"12250\" at index 3 (mode 2, neg false) to \"122\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12350\" at index 3 (mode 2, neg false) to \"124\"","status":"passed","title":"should round \"12350\" at index 3 (mode 2, neg false) to \"124\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12251\" at index 3 (mode 2, neg false) to \"123\"","status":"passed","title":"should round \"12251\" at index 3 (mode 2, neg false) to \"123\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12351\" at index 3 (mode 2, neg false) to \"124\"","status":"passed","title":"should round \"12351\" at index 3 (mode 2, neg false) to \"124\"","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"250\" at index 1 (mode 2, neg false) to \"2\"","status":"passed","title":"should round \"250\" at index 1 (mode 2, neg false) to \"2\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"350\" at index 1 (mode 2, neg false) to \"4\"","status":"passed","title":"should round \"350\" at index 1 (mode 2, neg false) to \"4\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12301\" at index 3 (mode 3, neg false) to \"124\"","status":"passed","title":"should round \"12301\" at index 3 (mode 3, neg false) to \"124\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12300\" at index 3 (mode 3, neg false) to \"123\"","status":"passed","title":"should round \"12300\" at index 3 (mode 3, neg false) to \"123\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"12301\" at index 3 (mode 3, neg true) to \"123\"","status":"passed","title":"should round \"12301\" at index 3 (mode 3, neg true) to \"123\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"1\" at index 0 (mode 3, neg false) to \"1\"","status":"passed","title":"should round \"1\" at index 0 (mode 3, neg false) to \"1\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound_cpu() - internal rounding logic"],"fullName":"BigIntPrimitive _staticRound_cpu() - internal rounding logic should round \"0\" at index 0 (mode 3, neg false) to \"0\"","status":"passed","title":"should round \"0\" at index 0 (mode 3, neg false) to \"0\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert \"123\" to 123","status":"passed","title":"should convert \"123\" to 123","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert \"-45.67\" to -45.67","status":"passed","title":"should convert \"-45.67\" to -45.67","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert \"0\" to 0","status":"passed","title":"should convert \"0\" to 0","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert \"1e+500\" to Infinity","status":"passed","title":"should convert \"1e+500\" to Infinity","duration":3.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert \"-1e+500\" to -Infinity","status":"passed","title":"should convert \"-1e+500\" to -Infinity","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert a number that will lose precision to an approximate JS number","status":"passed","title":"should convert a number that will lose precision to an approximate JS number","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert a very small number to its JS number representation","status":"passed","title":"should convert a very small number to its JS number representation","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Non-Strict Mode (BigIntPrimitive.strict = false)"],"fullName":"BigIntPrimitive toNumber() - public method Non-Strict Mode (BigIntPrimitive.strict = false) should convert scientific notation string to number","status":"passed","title":"should convert scientific notation string to number","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"123\" to 123","status":"passed","title":"should convert \"123\" to 123","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"-45.67\" to -45.67","status":"passed","title":"should convert \"-45.67\" to -45.67","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"123.000\" to 123 without error","status":"passed","title":"should convert \"123.000\" to 123 without error","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"123.45600\" to 123.456 without error","status":"passed","title":"should convert \"123.45600\" to 123.456 without error","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"0\" to 0","status":"passed","title":"should convert \"0\" to 0","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should convert \"-0\" to 0 (and not throw due to sign)","status":"passed","title":"should convert \"-0\" to 0 (and not throw due to sign)","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should throw TypeError for \"1e+500\" (non-finite)","status":"passed","title":"should throw TypeError for \"1e+500\" (non-finite)","duration":2.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should throw TypeError for \"-1e+500\" (non-finite)","status":"passed","title":"should throw TypeError for \"-1e+500\" (non-finite)","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should throw TypeError for \"123456789012345678901\" (precision loss)","status":"passed","title":"should throw TypeError for \"123456789012345678901\" (precision loss)","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should throw TypeError for very small number with precision loss","status":"passed","title":"should throw TypeError for very small number with precision loss","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber() - public method","Strict Mode (BigIntPrimitive.strict = true)"],"fullName":"BigIntPrimitive toNumber() - public method Strict Mode (BigIntPrimitive.strict = true) should not throw for numbers that convert exactly even if toString differs for trailing zeros","status":"passed","title":"should not throw for numbers that convert exactly even if toString differs for trailing zeros","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format 45.6 to \"4.56e+1\" with undefined dp","status":"passed","title":"should format 45.6 to \"4.56e+1\" with undefined dp","duration":1.1999999997206032,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format 45.6 to \"5e+1\" with dp 0","status":"passed","title":"should format 45.6 to \"5e+1\" with dp 0","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format 45.6 to \"4.6e+1\" with dp 1","status":"passed","title":"should format 45.6 to \"4.6e+1\" with dp 1","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format 45.6 to \"4.5e+1\" with dp 1 and roundDown","status":"passed","title":"should format 45.6 to \"4.5e+1\" with dp 1 and roundDown","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format 45.6 to \"4.560e+1\" with dp 3","status":"passed","title":"should format 45.6 to \"4.560e+1\" with dp 3","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"0\" to \"0e+0\" with undefined dp","status":"passed","title":"should format \"0\" to \"0e+0\" with undefined dp","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"0\" to \"0.00e+0\" with dp 2","status":"passed","title":"should format \"0\" to \"0.00e+0\" with dp 2","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"-45.6\" to \"-4.6e+1\" with dp 1","status":"passed","title":"should format \"-45.6\" to \"-4.6e+1\" with dp 1","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"0.00123\" to \"1.2e-3\" with dp 1","status":"passed","title":"should format \"0.00123\" to \"1.2e-3\" with dp 1","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"12345e10\" to \"1.23e+14\" with dp 2","status":"passed","title":"should format \"12345e10\" to \"1.23e+14\" with dp 2","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"12345\" to \"1.23e+4\" with dp 2","status":"passed","title":"should format \"12345\" to \"1.23e+4\" with dp 2","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should format \"123.456\" to \"1.23456e+2\" with undefined dp","status":"passed","title":"should format \"123.456\" to \"1.23456e+2\" with undefined dp","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should use BigIntPrimitive.RM when rm is undefined","status":"passed","title":"should use BigIntPrimitive.RM when rm is undefined","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should throw error for invalid dp","status":"passed","title":"should throw error for invalid dp","duration":1.400000000372529,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should throw error for invalid rm","status":"passed","title":"should throw error for invalid rm","duration":0.599999999627471,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should correctly round \"1.99\" with dp 1 to \"2.0e+0\"","status":"passed","title":"should correctly round \"1.99\" with dp 1 to \"2.0e+0\"","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should correctly round \"9.99\" with dp 1 (RM_HalfUp) to \"1.0e+1\"","status":"passed","title":"should correctly round \"9.99\" with dp 1 (RM_HalfUp) to \"1.0e+1\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should correctly round \"0.5\" with dp 0 to \"5e-1\"","status":"passed","title":"should correctly round \"0.5\" with dp 0 to \"5e-1\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should correctly round \"0.099\" with dp 1 to \"9.9e-2\" (RM_HalfUp)","status":"passed","title":"should correctly round \"0.099\" with dp 1 to \"9.9e-2\" (RM_HalfUp)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should handle numbers that are already in exponential form correctly","status":"passed","title":"should handle numbers that are already in exponential form correctly","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should handle \"1\" with dp 2","status":"passed","title":"should handle \"1\" with dp 2","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() should handle rounding of 0.05 to 0 dp to \"5e-2\"","status":"passed","title":"should handle rounding of 0.05 to 0 dp to \"5e-2\"","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(0.0000000123).toExponential() -> \"1.23e-8\"","status":"passed","title":"big.js test: new Big(0.0000000123).toExponential() -> \"1.23e-8\"","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(0.0000000123).toExponential(1) -> \"1.2e-8\"","status":"passed","title":"big.js test: new Big(0.0000000123).toExponential(1) -> \"1.2e-8\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(0.0000000123).toExponential(5) -> \"1.23000e-8\"","status":"passed","title":"big.js test: new Big(0.0000000123).toExponential(5) -> \"1.23000e-8\"","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(999.999).toExponential(0) -> \"1e+3\"","status":"passed","title":"big.js test: new Big(999.999).toExponential(0) -> \"1e+3\"","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(999.999).toExponential(1) -> \"1.0e+3\"","status":"passed","title":"big.js test: new Big(999.999).toExponential(1) -> \"1.0e+3\"","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(999.999).toExponential(2) -> \"1.00e+3\"","status":"passed","title":"big.js test: new Big(999.999).toExponential(2) -> \"1.00e+3\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(0).toExponential(3) -> \"0.000e+0\"","status":"passed","title":"big.js test: new Big(0).toExponential(3) -> \"0.000e+0\"","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toExponential()"],"fullName":"BigIntPrimitive toExponential() big.js test: new Big(-0.5).toExponential(0) -> \"-5e-1\"","status":"passed","title":"big.js test: new Big(-0.5).toExponential(0) -> \"-5e-1\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format 45.6 to \"45.6\" with undefined dp (big.js x.toFixed())","status":"passed","title":"should format 45.6 to \"45.6\" with undefined dp (big.js x.toFixed())","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format 45.6 to \"46\" with dp 0 (big.js x.toFixed(0))","status":"passed","title":"should format 45.6 to \"46\" with dp 0 (big.js x.toFixed(0))","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format 45.6 to \"45.600\" with dp 3 (big.js x.toFixed(3))","status":"passed","title":"should format 45.6 to \"45.600\" with dp 3 (big.js x.toFixed(3))","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format 1.23e+5 to \"123000\" with undefined dp (big.js y.toFixed())","status":"passed","title":"should format 1.23e+5 to \"123000\" with undefined dp (big.js y.toFixed())","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format 1.23e-5 to \"0.0000123\" with undefined dp (big.js z.toFixed())","status":"passed","title":"should format 1.23e-5 to \"0.0000123\" with undefined dp (big.js z.toFixed())","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"0\" to \"0\" with undefined dp","status":"passed","title":"should format \"0\" to \"0\" with undefined dp","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"0\" to \"0.00\" with dp 2","status":"passed","title":"should format \"0\" to \"0.00\" with dp 2","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"-0\" to \"0\" with undefined dp","status":"passed","title":"should format \"-0\" to \"0\" with undefined dp","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"-0\" to \"0.00\" with dp 2","status":"passed","title":"should format \"-0\" to \"0.00\" with dp 2","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"-45.6\" to \"-45.6\" with dp 1 (RM_HalfUp)","status":"passed","title":"should format \"-45.6\" to \"-45.6\" with dp 1 (RM_HalfUp)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"-45.67\" to \"-45.7\" with dp 1 (RM_HalfUp)","status":"passed","title":"should format \"-45.67\" to \"-45.7\" with dp 1 (RM_HalfUp)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"1.2345\" to \"1.23\" with dp 2 and roundDown","status":"passed","title":"should format \"1.2345\" to \"1.23\" with dp 2 and roundDown","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"1234567890123456789012\" to \"1234567890123456789012\" with dp 0","status":"passed","title":"should format \"1234567890123456789012\" to \"1234567890123456789012\" with dp 0","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"1234567890.123456789012\" to \"1234567890.123457\" with dp 6 (RM_HalfUp)","status":"passed","title":"should format \"1234567890.123456789012\" to \"1234567890.123457\" with dp 6 (RM_HalfUp)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"123\" to \"123.00\" with dp 2","status":"passed","title":"should format \"123\" to \"123.00\" with dp 2","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should use BigIntPrimitive.RM when rm is undefined","status":"passed","title":"should use BigIntPrimitive.RM when rm is undefined","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should throw error for invalid dp","status":"passed","title":"should throw error for invalid dp","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should throw error for invalid rm","status":"passed","title":"should throw error for invalid rm","duration":0.7000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"1e30\" to \"1000000000000000000000000000000.00\" with dp 2","status":"passed","title":"should format \"1e30\" to \"1000000000000000000000000000000.00\" with dp 2","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"1e-30\" to \"0.00000000000000000000000000000100\" with dp 32","status":"passed","title":"should format \"1e-30\" to \"0.00000000000000000000000000000100\" with dp 32","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"0.0000000000000000000000000000000000000000000000000123\" (50 zeros after point) to fixed with 53 dp","status":"passed","title":"should format \"0.0000000000000000000000000000000000000000000000000123\" (50 zeros after point) to fixed with 53 dp","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"123.4567\" to \"123\" for dp 0, roundDown","status":"passed","title":"should format \"123.4567\" to \"123\" for dp 0, roundDown","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"123.5\" to \"124\" for dp 0, roundHalfUp","status":"passed","title":"should format \"123.5\" to \"124\" for dp 0, roundHalfUp","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"122.5\" to \"122\" for dp 0, roundHalfEven","status":"passed","title":"should format \"122.5\" to \"122\" for dp 0, roundHalfEven","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"0.00000\" to \"0.00\" with dp 2","status":"passed","title":"should format \"0.00000\" to \"0.00\" with dp 2","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"-0.00000\" to \"0.00\" with dp 2","status":"passed","title":"should format \"-0.00000\" to \"0.00\" with dp 2","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toFixed()"],"fullName":"BigIntPrimitive toFixed() should format \"12345.000000000000000000000000000001\" (1e-30) to \"12345.00\" with dp 2","status":"passed","title":"should format \"12345.000000000000000000000000000001\" (1e-30) to \"12345.00\" with dp 2","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(7, defaultRM) for \"123.456\" to be like \"1.234560e+2\" (big.js string)","status":"passed","title":"should correctly process prec(7, defaultRM) for \"123.456\" to be like \"1.234560e+2\" (big.js string)","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(5, defaultRM) for \"123.456\" to be like \"1.2346e+2\" (big.js string)","status":"failed","title":"should correctly process prec(5, defaultRM) for \"123.456\" to be like \"1.2346e+2\" (big.js string)","duration":301.10000000009313,"failureMessages":["AssertionError: expected '123.4' to be '123.46' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-5--defaultRM--for--123-456--to-be-like--1-2346e-2---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, defaultRM) for \"123.456\" to be like \"1.23e+2\" (big.js string)","status":"passed","title":"should correctly process prec(3, defaultRM) for \"123.456\" to be like \"1.23e+2\" (big.js string)","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, defaultRM) for \"123.456\" to be like \"1.2e+2\" (big.js string)","status":"passed","title":"should correctly process prec(2, defaultRM) for \"123.456\" to be like \"1.2e+2\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, defaultRM) for \"123.456\" to be like \"1e+2\" (big.js string)","status":"passed","title":"should correctly process prec(1, defaultRM) for \"123.456\" to be like \"1e+2\" (big.js string)","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(4, defaultRM) for \"0.0012345\" to be like \"1.235e-3\" (big.js string)","status":"failed","title":"should correctly process prec(4, defaultRM) for \"0.0012345\" to be like \"1.235e-3\" (big.js string)","duration":107.5,"failureMessages":["AssertionError: expected '0.001' to be '0.001235' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-4--defaultRM--for--0-0012345--to-be-like--1-235e-3---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, defaultRM) for \"0.0012345\" to be like \"1.23e-3\" (big.js string)","status":"failed","title":"should correctly process prec(3, defaultRM) for \"0.0012345\" to be like \"1.23e-3\" (big.js string)","duration":105.39999999990687,"failureMessages":["AssertionError: expected '0.00' to be '0.00123' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-3--defaultRM--for--0-0012345--to-be-like--1-23e-3---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, defaultRM) for \"0.0012345\" to be like \"1e-3\" (big.js string)","status":"failed","title":"should correctly process prec(1, defaultRM) for \"0.0012345\" to be like \"1e-3\" (big.js string)","duration":106.8000000002794,"failureMessages":["AssertionError: expected '0' to be '0.001' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-1--defaultRM--for--0-0012345--to-be-like--1e-3---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, 1) for \"999.9\" to be like \"1e+3\" (big.js string)","status":"passed","title":"should correctly process prec(1, 1) for \"999.9\" to be like \"1e+3\" (big.js string)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(4, 1) for \"999.9\" to be like \"9.999e+2\" (big.js string)","status":"passed","title":"should correctly process prec(4, 1) for \"999.9\" to be like \"9.999e+2\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(5, 1) for \"999.9\" to be like \"9.9990e+2\" (big.js string)","status":"passed","title":"should correctly process prec(5, 1) for \"999.9\" to be like \"9.9990e+2\" (big.js string)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, 1) for \"-123.45\" to be like \"-1.23e+2\" (big.js string)","status":"passed","title":"should correctly process prec(3, 1) for \"-123.45\" to be like \"-1.23e+2\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, 1) for \"-123.45\" to be like \"-1.2e+2\" (big.js string)","status":"passed","title":"should correctly process prec(2, 1) for \"-123.45\" to be like \"-1.2e+2\" (big.js string)","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, 2) for \"5.5\" to be like \"6e+0\" (big.js string)","status":"passed","title":"should correctly process prec(1, 2) for \"5.5\" to be like \"6e+0\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, 2) for \"6.5\" to be like \"6e+0\" (big.js string)","status":"passed","title":"should correctly process prec(1, 2) for \"6.5\" to be like \"6e+0\" (big.js string)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, 1) for \"2.5\" to be like \"3e+0\" (big.js string)","status":"passed","title":"should correctly process prec(1, 1) for \"2.5\" to be like \"3e+0\" (big.js string)","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, 0) for \"2.5\" to be like \"2e+0\" (big.js string)","status":"passed","title":"should correctly process prec(1, 0) for \"2.5\" to be like \"2e+0\" (big.js string)","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, defaultRM) for \"0\" to be like \"0.00\" (big.js string)","status":"passed","title":"should correctly process prec(3, defaultRM) for \"0\" to be like \"0.00\" (big.js string)","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, defaultRM) for \"0.000\" to be like \"0.0\" (big.js string)","status":"passed","title":"should correctly process prec(2, defaultRM) for \"0.000\" to be like \"0.0\" (big.js string)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(4, defaultRM) for \"-0\" to be like \"0.000\" (big.js string)","status":"passed","title":"should correctly process prec(4, defaultRM) for \"-0\" to be like \"0.000\" (big.js string)","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(10, defaultRM) for \"123456789.123456789\" to be like \"1.234567891e+8\" (big.js string)","status":"passed","title":"should correctly process prec(10, defaultRM) for \"123456789.123456789\" to be like \"1.234567891e+8\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(5, defaultRM) for \"123456789.123456789\" to be like \"1.2346e+8\" (big.js string)","status":"passed","title":"should correctly process prec(5, defaultRM) for \"123456789.123456789\" to be like \"1.2346e+8\" (big.js string)","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, defaultRM) for \"0.999999\" to be like \"1.0e+0\" (big.js string)","status":"failed","title":"should correctly process prec(2, defaultRM) for \"0.999999\" to be like \"1.0e+0\" (big.js string)","duration":110.39999999990687,"failureMessages":["AssertionError: expected '1.0' to be '1' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-2--defaultRM--for--0-999999--to-be-like--1-0e-0---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, defaultRM) for \"0.999999\" to be like \"1e+0\" (big.js string)","status":"passed","title":"should correctly process prec(1, defaultRM) for \"0.999999\" to be like \"1e+0\" (big.js string)","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, defaultRM) for \"9.99e+10\" to be like \"1.0e+11\" (big.js string)","status":"passed","title":"should correctly process prec(2, defaultRM) for \"9.99e+10\" to be like \"1.0e+11\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, defaultRM) for \"1\" to be like \"1.00e+0\" (big.js string)","status":"failed","title":"should correctly process prec(3, defaultRM) for \"1\" to be like \"1.00e+0\" (big.js string)","duration":97.60000000009313,"failureMessages":["AssertionError: expected '1.00' to be '1' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-3--defaultRM--for--1--to-be-like--1-00e-0---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(1, defaultRM) for \"123\" to be like \"1e+2\" (big.js string)","status":"passed","title":"should correctly process prec(1, defaultRM) for \"123\" to be like \"1e+2\" (big.js string)","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(2, defaultRM) for \"123\" to be like \"1.2e+2\" (big.js string)","status":"passed","title":"should correctly process prec(2, defaultRM) for \"123\" to be like \"1.2e+2\" (big.js string)","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(3, defaultRM) for \"123\" to be like \"1.23e+2\" (big.js string)","status":"passed","title":"should correctly process prec(3, defaultRM) for \"123\" to be like \"1.23e+2\" (big.js string)","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should correctly process prec(4, defaultRM) for \"123\" to be like \"1.230e+2\" (big.js string)","status":"failed","title":"should correctly process prec(4, defaultRM) for \"123\" to be like \"1.230e+2\" (big.js string)","duration":102.59999999962747,"failureMessages":["AssertionError: expected '123.0' to be '123' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:898:35\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-correctly-process-prec-4--defaultRM--for--123--to-be-like--1-230e-2---big-js-string--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(1, defaultRM) on \"123.456\" -> \"100\"","status":"passed","title":"should match big.js toString() for prec(1, defaultRM) on \"123.456\" -> \"100\"","duration":0.39999999990686774,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(2, defaultRM) on \"123.456\" -> \"120\"","status":"passed","title":"should match big.js toString() for prec(2, defaultRM) on \"123.456\" -> \"120\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(3, defaultRM) on \"123.456\" -> \"123\"","status":"passed","title":"should match big.js toString() for prec(3, defaultRM) on \"123.456\" -> \"123\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(4, 1) on \"123.456\" -> \"123.5\"","status":"passed","title":"should match big.js toString() for prec(4, 1) on \"123.456\" -> \"123.5\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(5, 1) on \"123.456\" -> \"123.46\"","status":"failed","title":"should match big.js toString() for prec(5, 1) on \"123.456\" -> \"123.46\"","duration":93.20000000018626,"failureMessages":["AssertionError: expected '123.4' to be '123.46' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1024:42\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-match-big-js-toString---for-prec-5--1--on--123-456------123-46--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(6, 1) on \"123.456\" -> \"123.456\"","status":"failed","title":"should match big.js toString() for prec(6, 1) on \"123.456\" -> \"123.456\"","duration":116.79999999981374,"failureMessages":["AssertionError: expected '123.45' to be '123.456' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1024:42\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-match-big-js-toString---for-prec-6--1--on--123-456------123-456--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(7, 1) on \"123.456\" -> \"123.4560\"","status":"passed","title":"should match big.js toString() for prec(7, 1) on \"123.456\" -> \"123.4560\"","duration":0.3000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(1, 1) on \"0.0012345\" -> \"0.001\"","status":"failed","title":"should match big.js toString() for prec(1, 1) on \"0.0012345\" -> \"0.001\"","duration":104.29999999981374,"failureMessages":["AssertionError: expected '0' to be '0.001' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1024:42\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-match-big-js-toString---for-prec-1--1--on--0-0012345------0-001--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(3, 1) on \"0.0012345\" -> \"0.00123\"","status":"failed","title":"should match big.js toString() for prec(3, 1) on \"0.0012345\" -> \"0.00123\"","duration":98.60000000009313,"failureMessages":["AssertionError: expected '0.00' to be '0.00123' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1024:42\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-match-big-js-toString---for-prec-3--1--on--0-0012345------0-00123--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(4, 1) on \"0.0012345\" -> \"0.001235\"","status":"failed","title":"should match big.js toString() for prec(4, 1) on \"0.0012345\" -> \"0.001235\"","duration":112.29999999981374,"failureMessages":["AssertionError: expected '0.001' to be '0.001235' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1024:42\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---should-match-big-js-toString---for-prec-4--1--on--0-0012345------0-001235--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(1, 1) on \"999.9\" -> \"1000\"","status":"passed","title":"should match big.js toString() for prec(1, 1) on \"999.9\" -> \"1000\"","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(4, 1) on \"999.9\" -> \"999.9\"","status":"passed","title":"should match big.js toString() for prec(4, 1) on \"999.9\" -> \"999.9\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(5, 1) on \"999.9\" -> \"999.90\"","status":"passed","title":"should match big.js toString() for prec(5, 1) on \"999.9\" -> \"999.90\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(3, defaultRM) on \"0\" -> \"0.000\"","status":"passed","title":"should match big.js toString() for prec(3, defaultRM) on \"0\" -> \"0.000\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should match big.js toString() for prec(3, defaultRM) on \"1\" -> \"1.00\"","status":"passed","title":"should match big.js toString() for prec(3, defaultRM) on \"1\" -> \"1.00\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() toString of prec result: 123.456, prec(7) -> \"123.4560\" (big.js like)","status":"failed","title":"toString of prec result: 123.456, prec(7) -> \"123.4560\" (big.js like)","duration":98.40000000037253,"failureMessages":["AssertionError: expected '123.456' to be '123.4560' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1058:33\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/prec---toString-of-prec-result--123-456--prec-7------123-4560---big-js-like--1.png"}},{"ancestorTitles":["prec()"],"fullName":"prec() should throw RangeError for invalid sd","status":"passed","title":"should throw RangeError for invalid sd","duration":1.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should throw RangeError for invalid rm","status":"passed","title":"should throw RangeError for invalid rm","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["prec()"],"fullName":"prec() should use BigIntPrimitive.RM if rm is undefined","status":"passed","title":"should use BigIntPrimitive.RM if rm is undefined","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12345\" toPrecision(7) to \"12345.00\"","status":"passed","title":"should format \"12345\" toPrecision(7) to \"12345.00\"","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12345\" toPrecision(5) to \"12345\"","status":"passed","title":"should format \"12345\" toPrecision(5) to \"12345\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12345\" toPrecision(3) to \"1.23e+4\"","status":"passed","title":"should format \"12345\" toPrecision(3) to \"1.23e+4\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12345\" toPrecision(1) to \"1e+4\"","status":"passed","title":"should format \"12345\" toPrecision(1) to \"1e+4\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1.2345\" toPrecision(5) to \"1.2345\"","status":"passed","title":"should format \"1.2345\" toPrecision(5) to \"1.2345\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1.2345\" toPrecision(3) to \"1.23\"","status":"passed","title":"should format \"1.2345\" toPrecision(3) to \"1.23\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1.2345\" toPrecision(1) to \"1\"","status":"passed","title":"should format \"1.2345\" toPrecision(1) to \"1\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.0012345\" toPrecision(5) to \"0.0012345\"","status":"passed","title":"should format \"0.0012345\" toPrecision(5) to \"0.0012345\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.0012345\" toPrecision(3) to \"0.00123\"","status":"passed","title":"should format \"0.0012345\" toPrecision(3) to \"0.00123\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.0012345\" toPrecision(1) to \"0.001\"","status":"passed","title":"should format \"0.0012345\" toPrecision(1) to \"0.001\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.000000123\" toPrecision(2) to \"1.2e-7\"","status":"passed","title":"should format \"0.000000123\" toPrecision(2) to \"1.2e-7\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1e-7\" toPrecision(2) to \"1.0e-7\"","status":"passed","title":"should format \"1e-7\" toPrecision(2) to \"1.0e-7\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1e-6\" toPrecision(2) to \"0.0000010\"","status":"passed","title":"should format \"1e-6\" toPrecision(2) to \"0.0000010\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1e20\" toPrecision(2) to \"1.0e+20\"","status":"passed","title":"should format \"1e20\" toPrecision(2) to \"1.0e+20\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1e21\" toPrecision(2) to \"1.0e+21\"","status":"passed","title":"should format \"1e21\" toPrecision(2) to \"1.0e+21\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0\" toPrecision(1) to \"0\"","status":"passed","title":"should format \"0\" toPrecision(1) to \"0\"","duration":0.09999999962747097,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0\" toPrecision(3) to \"0.00\"","status":"passed","title":"should format \"0\" toPrecision(3) to \"0.00\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"-0\" toPrecision(4) to \"0.000\"","status":"passed","title":"should format \"-0\" toPrecision(4) to \"0.000\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12.345\" toPrecision(4, 1) to \"12.35\"","status":"passed","title":"should format \"12.345\" toPrecision(4, 1) to \"12.35\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"12.345\" toPrecision(4, 0) to \"12.34\"","status":"passed","title":"should format \"12.345\" toPrecision(4, 0) to \"12.34\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"-12.345\" toPrecision(4, 1) to \"-12.35\"","status":"passed","title":"should format \"-12.345\" toPrecision(4, 1) to \"-12.35\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"9.999\" toPrecision(2, 1) to \"10\"","status":"passed","title":"should format \"9.999\" toPrecision(2, 1) to \"10\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.999\" toPrecision(2, 1) to \"1.0\"","status":"passed","title":"should format \"0.999\" toPrecision(2, 1) to \"1.0\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"240000\" toPrecision(2) to \"2.4e+5\"","status":"passed","title":"should format \"240000\" toPrecision(2) to \"2.4e+5\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"240000\" toPrecision(2, 0) to \"2.4e+5\"","status":"passed","title":"should format \"240000\" toPrecision(2, 0) to \"2.4e+5\"","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.0000024\" toPrecision(2) to \"0.0000024\"","status":"passed","title":"should format \"0.0000024\" toPrecision(2) to \"0.0000024\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"0.0000024\" toPrecision(2, 3) to \"0.0000024\"","status":"passed","title":"should format \"0.0000024\" toPrecision(2, 3) to \"0.0000024\"","duration":0.10000000009313226,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1234.56789\" toPrecision(6) to \"1234.57\"","status":"passed","title":"should format \"1234.56789\" toPrecision(6) to \"1234.57\"","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should format \"1234.56789\" toPrecision(6, 0) to \"1234.56\"","status":"passed","title":"should format \"1234.56789\" toPrecision(6, 0) to \"1234.56\"","duration":0,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should throw TypeError for undefined/null sd","status":"passed","title":"should throw TypeError for undefined/null sd","duration":1,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should throw RangeError for invalid sd","status":"passed","title":"should throw RangeError for invalid sd","duration":0.7999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should throw RangeError for invalid rm","status":"passed","title":"should throw RangeError for invalid rm","duration":0.6000000000931323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() should use BigIntPrimitive.RM if rm is undefined","status":"passed","title":"should use BigIntPrimitive.RM if rm is undefined","duration":0.2999999998137355,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() NE/PE boundary conditions: 1e-7, sd=2","status":"passed","title":"NE/PE boundary conditions: 1e-7, sd=2","duration":0.20000000018626451,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() NE/PE boundary conditions: 1.23e-7, sd=2 (force exp due to NE)","status":"passed","title":"NE/PE boundary conditions: 1.23e-7, sd=2 (force exp due to NE)","duration":0.19999999972060323,"failureMessages":[],"meta":{}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() NE/PE boundary conditions: 1e20, sd=21 (force fixed due to PE)","status":"failed","title":"NE/PE boundary conditions: 1e20, sd=21 (force fixed due to PE)","duration":110.60000000009313,"failureMessages":["AssertionError: expected '100000000000000000000.000000000000000' to be '100000000000000000000' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1260:33\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/toPrecision---NE-PE-boundary-conditions--1e20--sd-21--force-fixed-due-to-PE--1.png"}},{"ancestorTitles":["toPrecision()"],"fullName":"toPrecision() NE/PE boundary conditions: 1e20, sd=22 (force exp due to sd)","status":"failed","title":"NE/PE boundary conditions: 1e20, sd=22 (force exp due to sd)","duration":98,"failureMessages":["AssertionError: expected '100000000000000000000.0000000000000000' to be '100000000000000000000.0' // Object.is equality\n    at http://localhost:63315/app/lib/bigint.test.js?import&browserv=1749965022171:1278:33\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runFiles (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1784:3)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.test.js/toPrecision---NE-PE-boundary-conditions--1e20--sd-22--force-exp-due-to-sd--1.png"}}],"startTime":1749965022685,"endTime":1749965024559,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should add \"123\" + \"456\" via WebGL (with actual GPU read attempt)","status":"passed","title":"should add \"123\" + \"456\" via WebGL (with actual GPU read attempt)","duration":85.6999999997206,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should add two larger BigIntPrimitives requiring multiple limbs using WebGL (e.g., \"8000\" + \"7000\" = \"15000\")","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs using WebGL (e.g., \"8000\" + \"7000\" = \"15000\")","duration":55.299999999813735,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","add() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations add() - WebGL Path should handle adding zero to a number using WebGL","status":"passed","title":"should handle adding zero to a number using WebGL","duration":0.8999999999068677,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should subtract two positive single-limb numbers, no borrow (e.g., \"567\" - \"123\" = \"444\")","status":"passed","title":"should subtract two positive single-limb numbers, no borrow (e.g., \"567\" - \"123\" = \"444\")","duration":0.8999999999068677,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should subtract with borrow (e.g., \"123\" - \"34\" = \"89\")","status":"passed","title":"should subtract with borrow (e.g., \"123\" - \"34\" = \"89\")","duration":0.8000000002793968,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should handle subtracting to zero (e.g., \"123\" - \"123\" = \"0\")","status":"passed","title":"should handle subtracting to zero (e.g., \"123\" - \"123\" = \"0\")","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","subtract() - WebGL Path"],"fullName":"BigIntPrimitive WebGL Operations subtract() - WebGL Path should handle subtracting a larger number from a smaller one (e.g., \"100\" - \"200\" = \"-100\")","status":"passed","title":"should handle subtracting a larger number from a smaller one (e.g., \"100\" - \"200\" = \"-100\")","duration":0.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) [_webgl_multiply_one_limb_by_bigint] should multiply limb 12 by BigInt \"3\" (Actual GPU)","status":"failed","title":"[_webgl_multiply_one_limb_by_bigint] should multiply limb 12 by BigInt \"3\" (Actual GPU)","duration":275.40000000037253,"failureMessages":["AssertionError: expected '[WebGL Test _webgl_multiply_one_limb_…' to contain '[WebGL MultLimb Debug] Entry: limbVal…'\n    at http://localhost:63315/app/lib/bigint.webgl.test.js?import&browserv=1749965022148:191:22\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:155:11\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:752:26\n    at http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1860:10)\n    at runTest (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1571:12)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)\n    at async runSuite (http://localhost:63315/node_modules/@vitest/runner/dist/chunk-hooks.js?v=ccbc1642:1726:8)"],"meta":{"failScreenshotPath":"/app/lib/__screenshots__/bigint.webgl.test.js/BigIntPrimitive-WebGL-Operations-multiply-----WebGL-Path--Simple-Cases----webgl-multiply-one-limb-by-bigint--should-multiply-limb-12-by-BigInt--3---Actual-GPU--1.png"}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) should multiply with one number being zero using WebGL (e.g., \"123\" * \"0\" = \"0\")","status":"passed","title":"should multiply with one number being zero using WebGL (e.g., \"123\" * \"0\" = \"0\")","duration":4.2000000001862645,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive WebGL Operations","multiply() - WebGL Path (Simple Cases)"],"fullName":"BigIntPrimitive WebGL Operations multiply() - WebGL Path (Simple Cases) should multiply two single-digit numbers using WebGL (e.g., \"7\" * \"8\" = \"56\")","status":"passed","title":"should multiply two single-digit numbers using WebGL (e.g., \"7\" * \"8\" = \"56\")","duration":13.200000000186265,"failureMessages":[],"meta":{}}],"startTime":1749965022658,"endTime":1749965023097.2,"status":"failed","message":"","name":"/app/lib/bigint.webgl.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":55,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":188.6999999997206,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":174.10000000009313,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":193.89999999990687,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":93.5,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":155,"failureMessages":[],"meta":{}}],"startTime":1749965022815,"endTime":1749965023675,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}