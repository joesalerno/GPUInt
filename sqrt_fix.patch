--- a/lib/bigint.js
+++ b/lib/bigint.js
@@ -560,25 +560,30 @@
       const absDividend = dividend.abs();
       const absDivisor = divisor.abs();

-      let numCoeffStr = absDividend.limbs.join('');
-      let numEffectiveExp = absDividend.exponent + precision;
-
-      let denCoeffStr = absDivisor.limbs.join('');
-      let denEffectiveExp = absDivisor.exponent;
+      // Get full string representations and their effective integer coefficient and exponent
+      let sDividendFull = absDividend.toString();
+      let [sDividendCoeff, sDividendFrac = ''] = sDividendFull.split('.');
+      let numCoeffStr = sDividendCoeff + sDividendFrac;
+      // Exponent of the integer coefficient (numCoeffStr) if decimal was at the end
+      let numOriginalExp = absDividend.exponent + sDividendFrac.length;
+      let numEffectiveExp = numOriginalExp + precision;
+
+      let sDivisorFull = absDivisor.toString();
+      let [sDivisorCoeff, sDivisorFrac = ''] = sDivisorFull.split('.');
+      let denCoeffStr = sDivisorCoeff + sDivisorFrac;
+      let denEffectiveExp = absDivisor.exponent + sDivisorFrac.length;

       let finalNumStr, finalDenStr;
       let expDiffForBigInt = numEffectiveExp - denEffectiveExp;

       if (expDiffForBigInt >= 0) {
-        finalNumStr = numCoeffStr + '0'.repeat(expDiffForBigInt);
+        finalNumStr = numCoeffStr + (numCoeffStr === "0" ? "" : '0'.repeat(expDiffForBigInt));
         finalDenStr = denCoeffStr;
       } else {
         finalNumStr = numCoeffStr;
-        finalDenStr = denCoeffStr + '0'.repeat(-expDiffForBigInt);
+        finalDenStr = denCoeffStr + (denCoeffStr === "0" ? "" : '0'.repeat(-expDiffForBigInt));
       }

-      // Ensure strings are not empty before passing to BigInt
       if (finalNumStr === "") finalNumStr = "0";
       if (finalDenStr === "") finalDenStr = "0"; // Should be caught by divisor.isZero earlier or next check

@@ -637,7 +642,8 @@
       const s_div_xn = internalDivide(S, x_n, internalDP);

       const sum_terms = s_div_xn.add(x_n);
-      x_n_plus_1 = sum_terms.divide(two);
+      // x_n_plus_1 = sum_terms.divide(two); // Old line causing issues
+      x_n_plus_1 = internalDivide(sum_terms, two, internalDP); // Use precision division

       const tempConvergenceDP = originalDP + 5;
       const CtorDPForConvergenceCheck = Ctor.DP;
