{"numTotalTestSuites":60,"numPassedTestSuites":49,"numFailedTestSuites":11,"numPendingTestSuites":0,"numTotalTests":270,"numPassedTests":214,"numFailedTests":56,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1749768632285,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero string \"0\"","status":"passed","title":"should create BigIntPrimitive for zero string \"0\"","duration":5.010988999856636,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should create BigIntPrimitive for zero number 0","status":"passed","title":"should create BigIntPrimitive for zero number 0","duration":7.308713000034913,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should handle empty string as zero","status":"passed","title":"should handle empty string as zero","duration":1.4828019998967648,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":1.4117260000202805,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","constructor"],"fullName":"BigIntPrimitive constructor should throw TypeError for invalid input types","status":"passed","title":"should throw TypeError for invalid input types","duration":1.523185000056401,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid integer strings","status":"passed","title":"should parse valid integer strings","duration":1.1892890001181513,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse valid decimal strings","status":"passed","title":"should parse valid decimal strings","duration":1.53489699983038,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should parse scientific notation","status":"passed","title":"should parse scientific notation","duration":1.5571050001308322,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should normalize inputs","status":"passed","title":"should normalize inputs","duration":1.5757280001416802,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle number input, including decimals","status":"passed","title":"should handle number input, including decimals","duration":1.1175989999901503,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should handle copy constructor","status":"passed","title":"should handle copy constructor","duration":1.1418719999492168,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string formats","status":"passed","title":"should throw TypeError for invalid string formats","duration":1.353997000027448,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for invalid string input (non-numeric characters)","status":"passed","title":"should throw TypeError for invalid string input (non-numeric characters)","duration":0.5650090000126511,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Constructor (Decimal Support)"],"fullName":"BigIntPrimitive Constructor (Decimal Support) should throw TypeError for non-finite numeric input","status":"passed","title":"should throw TypeError for non-finite numeric input","duration":1.0451970000285655,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a positive number","status":"passed","title":"negate() should flip the sign of a positive number","duration":0.8196119999047369,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should flip the sign of a negative number","status":"passed","title":"negate() should flip the sign of a negative number","duration":0.4207460000179708,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison negate() should handle zero correctly","status":"passed","title":"negate() should handle zero correctly","duration":0.28673200006596744,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a negative number","status":"passed","title":"abs() should return positive for a negative number","duration":0.5646059999708086,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should return positive for a positive number","status":"passed","title":"abs() should return positive for a positive number","duration":0.2973449998535216,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison abs() should handle zero correctly","status":"passed","title":"abs() should handle zero correctly","duration":0.49585200008004904,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison isPositive() and isNegative() should work correctly","status":"passed","title":"isPositive() and isNegative() should work correctly","duration":0.6608150000683963,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Sign, Absolute Value, and Comparison"],"fullName":"BigIntPrimitive Sign, Absolute Value, and Comparison compareMagnitude() should correctly compare magnitudes","status":"passed","title":"compareMagnitude() should correctly compare magnitudes","duration":0.7515620000194758,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare positive numbers","status":"passed","title":"should correctly compare positive numbers","duration":0.4729269999079406,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare negative numbers","status":"passed","title":"should correctly compare negative numbers","duration":0.350756999803707,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare numbers with mixed signs","status":"passed","title":"should correctly compare numbers with mixed signs","duration":0.30431800009682775,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare with zero","status":"passed","title":"should correctly compare with zero","duration":0.532401000149548,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should correctly compare large multi-limb numbers","status":"passed","title":"should correctly compare large multi-limb numbers","duration":0.6547339998651296,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","cmp()"],"fullName":"BigIntPrimitive cmp() should throw TypeError for invalid input type","status":"passed","title":"should throw TypeError for invalid input type","duration":0.8570459999609739,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should correctly evaluate equality","status":"passed","title":"should correctly evaluate equality","duration":0.7669760000426322,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","eq()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) eq() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.2595529998652637,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should correctly evaluate greater than","status":"passed","title":"should correctly evaluate greater than","duration":0.5384290001820773,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.2648840001784265,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should correctly evaluate greater than or equal","status":"passed","title":"should correctly evaluate greater than or equal","duration":0.52100700000301,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","gte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) gte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.40216100006364286,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should correctly evaluate less than","status":"passed","title":"should correctly evaluate less than","duration":0.505917000118643,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lt()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lt() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.2912419999483973,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should correctly evaluate less than or equal","status":"passed","title":"should correctly evaluate less than or equal","duration":0.7113359998911619,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","Shorthand Comparison Methods (eq, gt, gte, lt, lte)","lte()"],"fullName":"BigIntPrimitive Shorthand Comparison Methods (eq, gt, gte, lt, lte) lte() should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":0.28844200004823506,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert simple BigIntPrimitive to string","status":"passed","title":"should convert simple BigIntPrimitive to string","duration":0.2719730001408607,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert multi-limb BigIntPrimitive to string (limbs are single digits)","status":"passed","title":"should convert multi-limb BigIntPrimitive to string (limbs are single digits)","duration":0.21934200008399785,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should convert single-digit number (single limb) to string","status":"passed","title":"should convert single-digit number (single limb) to string","duration":0.20079499995335937,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toString()"],"fullName":"BigIntPrimitive toString() should correctly represent numbers based on limbs and exponent (formerly padding tests)","status":"passed","title":"should correctly represent numbers based on limbs and exponent (formerly padding tests)","duration":0.5704709999263287,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert positive integer string to number","status":"passed","title":"should convert positive integer string to number","duration":0.3686450000386685,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert negative integer string to number","status":"passed","title":"should convert negative integer string to number","duration":0.24994999985210598,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert zero string to number zero","status":"passed","title":"should convert zero string to number zero","duration":0.2136809998191893,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should handle very large numbers with potential precision loss","status":"passed","title":"should handle very large numbers with potential precision loss","duration":0.6078990001697093,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toNumber()"],"fullName":"BigIntPrimitive toNumber() should convert numbers at the edge of safe integer precision","status":"passed","title":"should convert numbers at the edge of safe integer precision","duration":0.5399249999318272,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.33085000002756715,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","toJSON()"],"fullName":"BigIntPrimitive toJSON() and valueOf() toJSON() should work correctly with JSON.stringify()","status":"passed","title":"should work correctly with JSON.stringify()","duration":0.35146400006487966,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should return the string representation of the number","status":"passed","title":"should return the string representation of the number","duration":0.35466299997642636,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in string concatenation","status":"passed","title":"should be used in string concatenation","duration":0.22294999985024333,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","toJSON() and valueOf()","valueOf()"],"fullName":"BigIntPrimitive toJSON() and valueOf() valueOf() should be used in template literals","status":"passed","title":"should be used in template literals","duration":0.2611840001773089,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return true for zero","status":"passed","title":"should return true for zero","duration":0.20655399980023503,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","isZero()"],"fullName":"BigIntPrimitive isZero() should return false for non-zero","status":"passed","title":"should return false for non-zero","duration":0.20010100002400577,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","status":"passed","title":"should add two small BigIntPrimitives (e.g., \"123\" + \"456\" = \"579\")","duration":6.266793000046164,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","status":"passed","title":"should add two larger BigIntPrimitives requiring multiple limbs (e.g., \"8000\" + \"7000\" = \"15000\", BASE=10000)","duration":2.3023570000659674,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","status":"passed","title":"should add numbers resulting in a carry propagation across multiple limbs (e.g., \"9999\" + \"1\" = \"10000\")","duration":2.1702499999664724,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should handle adding zero to a number","status":"passed","title":"should handle adding zero to a number","duration":2.188435999909416,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock should add two multi-limb numbers with carries","status":"passed","title":"should add two multi-limb numbers with carries","duration":2.4688480000477284,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","add() with WebGL mock"],"fullName":"BigIntPrimitive add() with WebGL mock BUGFIX BROWSER ADD: 20000 + 5333 => 25333","status":"passed","title":"BUGFIX BROWSER ADD: 20000 + 5333 => 25333","duration":2.3507030000910163,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a > b)","status":"passed","title":"should handle positive - positive (a > b)","duration":1.059106000000611,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a < b)","status":"passed","title":"should handle positive - positive (a < b)","duration":0.8956430000253022,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - positive (a == b)","status":"passed","title":"should handle positive - positive (a == b)","duration":0.7247500000521541,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle positive - negative","status":"passed","title":"should handle positive - negative","duration":2.989759000018239,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - positive","status":"passed","title":"should handle negative - positive","duration":2.262669999850914,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) > abs(b))","status":"passed","title":"should handle negative - negative (abs(a) > abs(b))","duration":0.7824979999568313,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (abs(a) < abs(b))","status":"passed","title":"should handle negative - negative (abs(a) < abs(b))","duration":0.7839520000852644,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic should handle negative - negative (a == b)","status":"passed","title":"should handle negative - negative (a == b)","duration":1.0675109999720007,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic a - 0 = a","status":"passed","title":"a - 0 = a","duration":0.7768660001456738,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - a = -a","status":"passed","title":"0 - a = -a","duration":0.6630729997996241,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - (-a) = a","status":"passed","title":"0 - (-a) = a","duration":2.485389000037685,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","subtract() - public method with sign logic"],"fullName":"BigIntPrimitive subtract() - public method with sign logic 0 - 0 = 0","status":"passed","title":"0 - 0 = 0","duration":3.602695999899879,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract two positive single-limb numbers, no borrow","status":"passed","title":"should subtract two positive single-limb numbers, no borrow","duration":10.446811000118032,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract with borrow handled by shader and JS propagation","status":"passed","title":"should subtract with borrow handled by shader and JS propagation","duration":24.200543999904767,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should correctly subtract \"10000\" - \"1\"","status":"passed","title":"should correctly subtract \"10000\" - \"1\"","duration":2.8622559998184443,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should subtract to zero","status":"passed","title":"should subtract to zero","duration":2.747161000035703,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_subtract() with WebGL mock"],"fullName":"BigIntPrimitive _core_subtract() with WebGL mock should handle multi-limb subtraction with borrows","status":"passed","title":"should handle multi-limb subtraction with borrows","duration":2.888139999937266,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if limbValue is 0","status":"passed","title":"should return zero if limbValue is 0","duration":3.2451180000789464,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock should return zero if otherNumber is zero","status":"passed","title":"should return zero if otherNumber is zero","duration":3.4363430000375956,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, no final carry","status":"passed","title":"limbValue * single-limb otherNumber, no final carry","duration":2.8908100000116974,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * single-limb otherNumber, with final carry","status":"passed","title":"limbValue * single-limb otherNumber, with final carry","duration":2.6596519998274744,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, no JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, no JS propagated carry","duration":3.0262060000095516,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * multi-limb otherNumber, with JS propagated carry","status":"passed","title":"limbValue * multi-limb otherNumber, with JS propagated carry","duration":3.246705000055954,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock limbValue * otherNumber, where final propagatedCarry requires splitting","status":"passed","title":"limbValue * otherNumber, where final propagatedCarry requires splitting","duration":3.336428999900818,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"123\" = \"615\"","status":"passed","title":"CPU: 5 * \"123\" = \"615\"","duration":0.772690000012517,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 9 * \"9\" = \"81\"","status":"passed","title":"CPU: 9 * \"9\" = \"81\"","duration":0.7340429998002946,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 5 * \"1234\" = \"6170\"","status":"passed","title":"CPU: 5 * \"1234\" = \"6170\"","duration":0.6323230001144111,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 0 * \"12345\" = \"0\"","status":"passed","title":"CPU: 0 * \"12345\" = \"0\"","duration":0.741175000090152,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 7 * \"0\" = \"0\"","status":"passed","title":"CPU: 7 * \"0\" = \"0\"","duration":0.6730239999014884,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiply_limb_by_bigint() with WebGL mock"],"fullName":"BigIntPrimitive _multiply_limb_by_bigint() with WebGL mock CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","status":"passed","title":"CPU: 2 * \"500\" (exp 1) = \"1000\" (exp 1)","duration":0.5617630002088845,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num1 is zero","status":"passed","title":"should return zero if num1 is zero","duration":1.1753879999741912,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should return zero if num2 is zero","status":"passed","title":"should return zero if num2 is zero","duration":0.7135489999782294,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic single-limb * single-limb","status":"passed","title":"single-limb * single-limb","duration":3.1598129998892546,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic should correctly multiply \"11\" * \"11\" (testing simple accumulation)","status":"passed","title":"should correctly multiply \"11\" * \"11\" (testing simple accumulation)","duration":1.4948810001369566,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","status":"passed","title":"multi-limb * single-limb (e.g., 10001 * 5 = 50005, BASE 10k)","duration":2.0258909999392927,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_core_multiply() - internal multiplication logic"],"fullName":"BigIntPrimitive _core_multiply() - internal multiplication logic 123 * 45 = 5535","status":"passed","title":"123 * 45 = 5535","duration":2.87532199989073,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should throw TypeError for invalid input","status":"passed","title":"should throw TypeError for invalid input","duration":1.1166390001308173,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic a * 0 = 0","status":"passed","title":"a * 0 = 0","duration":0.8351360000669956,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic 0 * a = 0","status":"passed","title":"0 * a = 0","duration":0.7135120001621544,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive","status":"passed","title":"positive * positive = positive","duration":2.296106999972835,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * negative = negative","status":"passed","title":"positive * negative = negative","duration":1.6432090001180768,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative","status":"passed","title":"negative * positive = negative","duration":1.794086999958381,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * negative = positive","status":"passed","title":"negative * negative = positive","duration":1.6926420000381768,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic multiply result of zero should have positive sign","status":"passed","title":"multiply result of zero should have positive sign","duration":2.28791099996306,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","status":"failed","title":"should use _core_multiply for numbers smaller than KARATSUBA_THRESHOLD","duration":62.43928400008008,"failureMessages":["AssertionError: expected \"_core_multiply\" to be called 9 times, but got 1 times\n    at /app/lib/bigint.test.js:1163:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","status":"failed","title":"should use Karatsuba for large numbers (calls _splitAt and _core_multiply at base)","duration":7.941813000012189,"failureMessages":["AssertionError: expected \"_splitAt\" to be called at least once\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1326:10)\n    at Proxy.<anonymous> (file:///app/node_modules/@vitest/expect/dist/index.js:1022:14)\n    at Proxy.methodWrapper (file:///app/node_modules/chai/chai.js:1618:25)\n    at /app/lib/bigint.test.js:1196:28\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","status":"passed","title":"Karatsuba integration: 12345 * 67890 = 838002050 (tests schoolbook path due to threshold)","duration":2.1708660000003874,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic positive * positive = positive (forceCPU)","status":"passed","title":"positive * positive = positive (forceCPU)","duration":1.5590989999473095,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic negative * positive = negative (forceCPU)","status":"passed","title":"negative * positive = negative (forceCPU)","duration":1.3383870001416653,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","multiply() - public method with Karatsuba and sign logic"],"fullName":"BigIntPrimitive multiply() - public method with Karatsuba and sign logic Karatsuba integration: large numbers with forceCPU","status":"failed","title":"Karatsuba integration: large numbers with forceCPU","duration":29.038220999995247,"failureMessages":["RangeError: Invalid count value\n    at String.repeat (<anonymous>)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:542:68)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at BigIntPrimitive.multiply (/app/lib/bigint.js:559:29)\n    at BigIntPrimitive.mockCall (file:///app/node_modules/@vitest/spy/dist/index.js:89:15)\n    at BigIntPrimitive.multiply (file:///app/node_modules/tinyspy/dist/index.js:47:103)\n    at /app/lib/bigint.test.js:1252:33\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26"],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_DOWN (0): should truncate to specified decimal places","status":"passed","title":"RM_DOWN (0): should truncate to specified decimal places","duration":3.3585659998934716,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_UP (1): placeholder for future tests","status":"passed","title":"RM_HALF_UP (1): placeholder for future tests","duration":1.164153999881819,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_HALF_EVEN (2): placeholder for future tests","status":"passed","title":"RM_HALF_EVEN (2): placeholder for future tests","duration":0.6759399999864399,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic RM_UP (3): placeholder for future tests","status":"passed","title":"RM_UP (3): placeholder for future tests","duration":0.5907590000424534,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_staticRound() Internal Logic"],"fullName":"BigIntPrimitive _staticRound() Internal Logic Negative dp (rounding to powers of 10): placeholder","status":"passed","title":"Negative dp (rounding to powers of 10): placeholder","duration":0.6148800000082701,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(0) should return 1","status":"passed","title":"x.pow(0) should return 1","duration":0.808835000032559,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() x.pow(1) should return x","status":"passed","title":"x.pow(1) should return x","duration":0.9112040000036359,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 0.pow(n) should return 0 for n > 0","status":"passed","title":"0.pow(n) should return 0 for n > 0","duration":0.6848850001115352,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() 1.pow(n) should return 1","status":"passed","title":"1.pow(n) should return 1","duration":15.560541999991983,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() (-1).pow(n) should return 1 for even n, -1 for odd n","status":"passed","title":"(-1).pow(n) should return 1 for even n, -1 for odd n","duration":1.1329189999960363,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate simple positive base and exponent","status":"passed","title":"should calculate simple positive base and exponent","duration":1.516907999990508,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should calculate negative base with even/odd exponent","status":"passed","title":"should calculate negative base with even/odd exponent","duration":0.9382120000664145,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should handle larger numbers and exponents","status":"passed","title":"should handle larger numbers and exponents","duration":1.1122730001807213,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()"],"fullName":"BigIntPrimitive pow() should use CPU path and respect forceCPU option","status":"passed","title":"should use CPU path and respect forceCPU option","duration":0.9534029997885227,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for non-integer exponent","status":"passed","title":"should throw TypeError for non-integer exponent","duration":1.0154660001862794,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw TypeError for negative exponent","status":"passed","title":"should throw TypeError for negative exponent","duration":0.6957400001119822,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","pow()","Input Validation"],"fullName":"BigIntPrimitive pow() Input Validation should throw Error for exponent too large","status":"passed","title":"should throw Error for exponent too large","duration":0.7017489999998361,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return a copy when power is 0","status":"passed","title":"should return a copy when power is 0","duration":1.2333740000613034,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^1 (formerly BASE^1)","status":"passed","title":"should multiply by 10^1 (formerly BASE^1)","duration":0.7279290000442415,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply by 10^2 (formerly BASE^2)","status":"passed","title":"should multiply by 10^2 (formerly BASE^2)","duration":0.5931450000498444,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should multiply multi-digit number by 10^3","status":"passed","title":"should multiply multi-digit number by 10^3","duration":0.6270130001939833,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should return zero if this is zero","status":"passed","title":"should return zero if this is zero","duration":0.6893829999025911,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should preserve sign for negative numbers","status":"passed","title":"should preserve sign for negative numbers","duration":0.6105829998850822,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is negative","status":"passed","title":"should throw error if power is negative","duration":1.6841439998243004,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should throw error if power is not an integer","status":"passed","title":"should throw error if power is not an integer","duration":1.1224529999308288,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","_multiplyByPowerOfBase()"],"fullName":"BigIntPrimitive _multiplyByPowerOfBase() should handle power of 0 for a zero number","status":"passed","title":"should handle power of 0 for a zero number","duration":0.8236410000827163,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for add()","status":"passed","title":"should use CPU path when forceCPU is true for add()","duration":0.7526789999101311,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path when forceCPU is true for subtract()","status":"passed","title":"should use CPU path when forceCPU is true for subtract()","duration":0.8367709999438375,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive","forceCPU option"],"fullName":"BigIntPrimitive forceCPU option should use CPU path for multiply() when forceCPU is true","status":"passed","title":"should use CPU path for multiply() when forceCPU is true","duration":0.8321040000300854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should throw TypeError when constructing with a number in strict mode","status":"passed","title":"should throw TypeError when constructing with a number in strict mode","duration":0.4140309998765588,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a string in strict mode","status":"passed","title":"should NOT throw when constructing with a string in strict mode","duration":0.329769000178203,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should NOT throw when constructing with a BigIntPrimitive instance in strict mode","status":"passed","title":"should NOT throw when constructing with a BigIntPrimitive instance in strict mode","duration":0.3789020001422614,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","Constructor"],"fullName":"Strict Mode Constructor should allow number construction if strict mode is explicitly set to false locally","status":"passed","title":"should allow number construction if strict mode is explicitly set to false locally","duration":0.3216179998125881,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should throw Error when valueOf() is called in strict mode","status":"passed","title":"should throw Error when valueOf() is called in strict mode","duration":0.3811929998919368,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","valueOf()"],"fullName":"Strict Mode valueOf() should NOT throw for valueOf() if strict mode is explicitly false","status":"passed","title":"should NOT throw for valueOf() if strict mode is explicitly false","duration":0.38157600001432,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123\" to 123 without error in strict mode","status":"passed","title":"should convert \"123\" to 123 without error in strict mode","duration":0.3176969999913126,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"123.45\" to 123.45 without error in strict mode","status":"passed","title":"should convert \"123.45\" to 123.45 without error in strict mode","duration":0.2758810000959784,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert \"1.0000000000000001\" (17 decimal places, safe) without error","status":"passed","title":"should convert \"1.0000000000000001\" (17 decimal places, safe) without error","duration":0.35514699993655086,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","status":"passed","title":"should throw Error for \"1.0000000000000000001\" (20 decimal places, loses precision) in strict mode","duration":0.35491999983787537,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should convert Number.MAX_SAFE_INTEGER.toString() without error","status":"passed","title":"should convert Number.MAX_SAFE_INTEGER.toString() without error","duration":0.26559700001962483,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw Error for numbers that lose precision with Number() conversion","status":"passed","title":"should throw Error for numbers that lose precision with Number() conversion","duration":0.6788359999191016,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","status":"passed","title":"should not throw for (Number.MAX_SAFE_INTEGER + 1).toString() if Number() is exact","duration":0.2918010000139475,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"1e+1000\" to become Infinity without throwing in strict mode","status":"passed","title":"should allow \"1e+1000\" to become Infinity without throwing in strict mode","duration":35.9409999998752,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","status":"passed","title":"should allow \"-1e+1000\" to become -Infinity without throwing in strict mode","duration":0.39228100003674626,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","status":"passed","title":"should throw for \"NaN\" string if intermediate BigInt creation fails (strict mode)","duration":0.7560019998345524,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","toNumber()"],"fullName":"Strict Mode toNumber() should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","status":"passed","title":"should NOT throw for toNumber() if strict mode is explicitly false, even if precision is lost","duration":1.2556920000351965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","status":"passed","title":"BigIntPrimitive.strict = false; new BigIntPrimitive(1).toNumber() should work","duration":0.34184199990704656,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","status":"passed","title":"BigIntPrimitive.strict = true; expect(() => new BigIntPrimitive(1)).toThrow();","duration":0.6298010000027716,"failureMessages":[],"meta":{}},{"ancestorTitles":["Strict Mode","General Strict Mode Behavior"],"fullName":"Strict Mode General Strict Mode Behavior BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","status":"passed","title":"BigIntPrimitive.strict = false; expect(() => new BigIntPrimitive(1)).not.toThrow();","duration":0.5193010000512004,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() should throw an error for negative numbers","status":"passed","title":"should throw an error for negative numbers","duration":1.401575000025332,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0) should be 0","status":"passed","title":"sqrt(0) should be 0","duration":0.4697799999266863,"failureMessages":[],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(1) should be 1","status":"failed","title":"sqrt(1) should be 1","duration":13.866072000004351,"failureMessages":["AssertionError: expected '0' to be '1' // Object.is equality\n    at /app/lib/bigint.test.js:1672:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(4) should be 2","status":"failed","title":"sqrt(4) should be 2","duration":3.6530730000231415,"failureMessages":["AssertionError: expected '0' to be '2' // Object.is equality\n    at /app/lib/bigint.test.js:1678:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(9) should be 3","status":"failed","title":"sqrt(9) should be 3","duration":2.7836779998615384,"failureMessages":["AssertionError: expected '0' to be '3' // Object.is equality\n    at /app/lib/bigint.test.js:1684:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(16) should be 4","status":"failed","title":"sqrt(16) should be 4","duration":2.5149299998302013,"failureMessages":["AssertionError: expected '0' to be '4' // Object.is equality\n    at /app/lib/bigint.test.js:1690:39\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(2) with DP=20 should be 1.41421356237309504880","status":"failed","title":"sqrt(2) with DP=20 should be 1.41421356237309504880","duration":6.3239339999854565,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.41421356237309504880' // Object.is equality\n    at /app/lib/bigint.test.js:1697:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(3) with DP=20 should be 1.7320508075688772935","status":"failed","title":"sqrt(3) with DP=20 should be 1.7320508075688772935","duration":3.846125999931246,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '1.7320508075688772935' // Object.is equality\n    at /app/lib/bigint.test.js:1704:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(12345) with DP=20 should be 111.108055513539740030","status":"failed","title":"sqrt(12345) with DP=20 should be 111.108055513539740030","duration":9.899736999999732,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '111.10805551353974002952' // Object.is equality\n    at /app/lib/bigint.test.js:1711:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(0.0004) with DP=4 should be 0.02","status":"failed","title":"sqrt(0.0004) with DP=4 should be 0.02","duration":2.0837020000908524,"failureMessages":["AssertionError: expected '0.0000' to be '0.0200' // Object.is equality\n    at /app/lib/bigint.test.js:1718:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["sqrt()"],"fullName":"sqrt() sqrt(very small number) sqrt(0.00000000000000000001) DP 20","status":"failed","title":"sqrt(very small number) sqrt(0.00000000000000000001) DP 20","duration":2.2531709999311715,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0.00000000010000000000' // Object.is equality\n    at /app/lib/bigint.test.js:1725:35\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","status":"failed","title":"DEBUG TEST: 10 / 4 (DP=1) _decimalDivide raw output","duration":1.3949110000394285,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:1769:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 4 (DP=1, RM=halfUp) should be 2.5","status":"failed","title":"10 / 4 (DP=1, RM=halfUp) should be 2.5","duration":1.2055319999344647,"failureMessages":["AssertionError: expected '0.0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1787:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 2 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"1 / 2 (DP=1, RM=halfUp) should be 0.5","duration":1.6856670000124723,"failureMessages":["AssertionError: expected '0.0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1795:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 7 / 2 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"7 / 2 (DP=1, RM=halfUp) should be 3.5","duration":1.1998799999710172,"failureMessages":["AssertionError: expected '0.0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1803:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=2, RM=halfUp) should be 3.33","status":"failed","title":"10 / 3 (DP=2, RM=halfUp) should be 3.33","duration":1.3100749999284744,"failureMessages":["AssertionError: expected '0.00' to be '3.33' // Object.is equality\n    at /app/lib/bigint.test.js:1811:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 3 (DP=5, RM=halfUp) should be 3.33333","status":"failed","title":"10 / 3 (DP=5, RM=halfUp) should be 3.33333","duration":1.322019999846816,"failureMessages":["AssertionError: expected '0.00000' to be '3.33333' // Object.is equality\n    at /app/lib/bigint.test.js:1819:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 1 / 8 (DP=3, RM=halfUp) should be 0.125","status":"failed","title":"1 / 8 (DP=3, RM=halfUp) should be 0.125","duration":1.210175999905914,"failureMessages":["AssertionError: expected '1.000' to be '0.125' // Object.is equality\n    at /app/lib/bigint.test.js:1827:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10 / 0.5 (DP=0, RM=halfUp) should be 20","status":"failed","title":"10 / 0.5 (DP=0, RM=halfUp) should be 20","duration":1.316871999995783,"failureMessages":["AssertionError: expected '0' to be '20' // Object.is equality\n    at /app/lib/bigint.test.js:1835:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 10.5 / 3 (DP=1, RM=halfUp) should be 3.5","status":"failed","title":"10.5 / 3 (DP=1, RM=halfUp) should be 3.5","duration":1.104031999828294,"failureMessages":["AssertionError: expected '0.0' to be '3.5' // Object.is equality\n    at /app/lib/bigint.test.js:1843:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() 0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","status":"failed","title":"0.25 / 0.5 (DP=1, RM=halfUp) should be 0.5","duration":1.1531249999534339,"failureMessages":["AssertionError: expected '0.0' to be '0.5' // Object.is equality\n    at /app/lib/bigint.test.js:1851:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / 4 (DP=1) should be -2.5","status":"failed","title":"Sign handling: (-10) / 4 (DP=1) should be -2.5","duration":1.1563120000064373,"failureMessages":["AssertionError: expected '0.0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1859:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: 10 / (-4) (DP=1) should be -2.5","status":"failed","title":"Sign handling: 10 / (-4) (DP=1) should be -2.5","duration":1.2878089998848736,"failureMessages":["AssertionError: expected '0.0' to be '-2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1867:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Sign handling: (-10) / (-4) (DP=1) should be 2.5","status":"failed","title":"Sign handling: (-10) / (-4) (DP=1) should be 2.5","duration":1.3964929999783635,"failureMessages":["AssertionError: expected '0.0' to be '2.5' // Object.is equality\n    at /app/lib/bigint.test.js:1875:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by 1: 123.45 / 1 (DP=2) should be 123.45","status":"failed","title":"Division by 1: 123.45 / 1 (DP=2) should be 123.45","duration":1.1962779997847974,"failureMessages":["AssertionError: expected '0.00' to be '123.45' // Object.is equality\n    at /app/lib/bigint.test.js:1883:36\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division of zero: 0 / 5 (DP=0) should be 0","status":"passed","title":"Division of zero: 0 / 5 (DP=0) should be 0","duration":0.2790950001217425,"failureMessages":[],"meta":{}},{"ancestorTitles":["divide()"],"fullName":"divide() Division by zero should throw error","status":"passed","title":"Division by zero should throw error","duration":0.48708800016902387,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","status":"passed","title":"should handle dividend smaller than divisor: 5 / 10 => Q=0, R=5","duration":0.7795570001471788,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","status":"passed","title":"should handle dividend equal to divisor: 10 / 10 => Q=1, R=0","duration":0.3823640001937747,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle simple division with remainder: 10 / 3 => Q=3, R=1","status":"passed","title":"should handle simple division with remainder: 10 / 3 => Q=3, R=1","duration":0.3968650000169873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle zero dividend: 0 / 5 => Q=0, R=0","status":"passed","title":"should handle zero dividend: 0 / 5 => Q=0, R=0","duration":0.29253900004550815,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle multi-limb case: 50005 / 5 => Q=10001, R=0","status":"passed","title":"should handle multi-limb case: 50005 / 5 => Q=10001, R=0","duration":0.3035120000131428,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","_longDivide"],"fullName":"Division and Remainder _longDivide should handle BASE-related division: 20000 / 10000 => Q=2, R=0","status":"passed","title":"should handle BASE-related division: 20000 / 10000 => Q=2, R=0","duration":0.3673509999644011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: Division by zero","status":"passed","title":"Error Handling: Division by zero","duration":0.9634769998956472,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Error Handling: TypeError for invalid divisor","status":"passed","title":"Error Handling: TypeError for invalid divisor","duration":0.4325559998396784,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.6858769999817014,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":1.042903000023216,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":1.1013779998756945,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 0 / 5 => Q=0, R=0","status":"passed","title":"0 / 5 => Q=0, R=0","duration":0.8211169999558479,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 12345 / 1 => Q=12345, R=0","status":"failed","title":"12345 / 1 => Q=12345, R=0","duration":1.020966999931261,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '12345' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 10000 / 1 => Q=10000, R=0","status":"failed","title":"10000 / 1 => Q=10000, R=0","duration":0.9388009998947382,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '10000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Basic Cases (Positive Integers)"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Basic Cases (Positive Integers) 9999 / 10000 => Q=0, R=9999","status":"failed","title":"9999 / 10000 => Q=0, R=9999","duration":0.9443079999182373,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2138:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20000000000000000000 / 5333 => Q=3750234389649353, R=451","status":"failed","title":"20000000000000000000 / 5333 => Q=3750234389649353, R=451","duration":1.9090529999230057,"failureMessages":["AssertionError: expected '121.00000000000000000000' to be '3750234389649353' // Object.is equality\n    at /app/lib/bigint.test.js:2165:37\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123456 / 123 => Q=1003, R=87","status":"failed","title":"123456 / 123 => Q=1003, R=87","duration":1.0849820000585169,"failureMessages":["AssertionError: expected '4.00000000000000000000' to be '1003' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 1000000 / 101 => Q=9900, R=100","status":"failed","title":"1000000 / 101 => Q=9900, R=100","duration":1.2553310000803322,"failureMessages":["AssertionError: expected '3.00000000000000000000' to be '9900' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 10 / 2 => Q=5, R=0","status":"failed","title":"10 / 2 => Q=5, R=0","duration":1.0072220000438392,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '5' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 20 / 10 => Q=2, R=0","status":"failed","title":"20 / 10 => Q=2, R=0","duration":1.0372049999423325,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '2' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 100 / 10 => Q=10, R=0","status":"failed","title":"100 / 10 => Q=10, R=0","duration":1.0216080001555383,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '10' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 12345678901234567890 / 987654321 => Q=12499999887, R=339506163","status":"failed","title":"12345678901234567890 / 987654321 => Q=12499999887, R=339506163","duration":1.5343700000084937,"failureMessages":["AssertionError: expected '37986704.00000000000000000000' to be '12499999887' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 123 / 12345 => Q=0, R=123","status":"failed","title":"123 / 12345 => Q=0, R=123","duration":1.1426599998958409,"failureMessages":["AssertionError: expected '493.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 500000010 / 10000 => Q=50000, R=10","status":"failed","title":"500000010 / 10000 => Q=50000, R=10","duration":7.4416930000297725,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '50000' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 99999 / 100 => Q=999, R=99","status":"failed","title":"99999 / 100 => Q=999, R=99","duration":1.0359940000344068,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '999' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Multi-Limb Cases"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Multi-Limb Cases 60 / 10 => Q=6, R=0","status":"failed","title":"60 / 10 => Q=6, R=0","duration":0.9214689999353141,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '6' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2184:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / 3 => Q=3, R=1","status":"failed","title":"10 / 3 => Q=3, R=1","duration":1.0097659998573363,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / 3 => Q=-3, R=-1","status":"failed","title":"-10 / 3 => Q=-3, R=-1","duration":1.7722670000512153,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 10 / -3 => Q=-3, R=1","status":"failed","title":"10 / -3 => Q=-3, R=1","duration":0.9082170000765473,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -10 / -3 => Q=3, R=-1","status":"failed","title":"-10 / -3 => Q=3, R=-1","duration":1.6378240000922233,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / 4 => Q=3, R=0","status":"failed","title":"12 / 4 => Q=3, R=0","duration":0.9851829998660833,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / 4 => Q=-3, R=0","status":"failed","title":"-12 / 4 => Q=-3, R=0","duration":1.602653999812901,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 12 / -4 => Q=-3, R=0","status":"failed","title":"12 / -4 => Q=-3, R=0","duration":0.9197830001357943,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '-3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -12 / -4 => Q=3, R=0","status":"failed","title":"-12 / -4 => Q=3, R=0","duration":1.7163170001003891,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '3' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / 10 => Q=0, R=5","status":"failed","title":"5 / 10 => Q=0, R=5","duration":0.8694680000189692,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / 10 => Q=0, R=-5","status":"failed","title":"-5 / 10 => Q=0, R=-5","duration":1.7391049999278039,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling 5 / -10 => Q=0, R=5","status":"failed","title":"5 / -10 => Q=0, R=5","duration":0.944472000002861,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Sign Handling"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Sign Handling -5 / -10 => Q=0, R=-5","status":"failed","title":"-5 / -10 => Q=0, R=-5","duration":1.5684889999683946,"failureMessages":["AssertionError: expected '0.00000000000000000000' to be '0' // Object.is equality\n    at checkDivRem (/app/lib/bigint.test.js:2063:33)\n    at /app/lib/bigint.test.js:2210:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization 0 / 7 => Q=0, R=0","status":"passed","title":"0 / 7 => Q=0, R=0","duration":0.5272649999242276,"failureMessages":[],"meta":{}},{"ancestorTitles":["Division and Remainder","divideAndRemainder(), divide(), remainder() Public Methods","Zero Results and Normalization"],"fullName":"Division and Remainder divideAndRemainder(), divide(), remainder() Public Methods Zero Results and Normalization Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","status":"passed","title":"Negation of 0: new BigIntPrimitive(\"0\").negate() / 7","duration":0.5340260001830757,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Zero"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Zero new BigIntPrimitive(\"0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0\").toString() should be \"0\"","duration":0.28918699990026653,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"123\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123\").toString() should be \"123\"","duration":0.17211899999529123,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Integers"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Integers new BigIntPrimitive(\"-123\").toString() should be \"-123\"","status":"passed","title":"new BigIntPrimitive(\"-123\").toString() should be \"-123\"","duration":0.1686270001810044,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.45\").toString() should be \"123.45\"","duration":0.24584900005720556,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","status":"passed","title":"new BigIntPrimitive(\"-123.45\").toString() should be \"-123.45\"","duration":0.212569999974221,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","status":"passed","title":"new BigIntPrimitive(\"0.123\").toString() should be \"0.123\"","duration":0.1521999998949468,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Simple Decimals"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Simple Decimals new BigIntPrimitive(\".5\").toString() should be \"0.5\"","status":"passed","title":"new BigIntPrimitive(\".5\").toString() should be \"0.5\"","duration":0.13965900009498,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"123.4500\").toString() should be \"123.45\"","duration":0.15154300001449883,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","status":"passed","title":"new BigIntPrimitive(\"00123.45\").toString() should be \"123.45\"","duration":0.13235200010240078,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Trailing/Leading Zeros (after constructor normalization)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Trailing/Leading Zeros (after constructor normalization) new BigIntPrimitive(\"123.0\").toString() should be \"123\"","status":"passed","title":"new BigIntPrimitive(\"123.0\").toString() should be \"123\"","duration":0.13962400006130338,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12345\" should be \"12345\"","status":"passed","title":"PE = 5: \"12345\" should be \"12345\"","duration":0.25800799997523427,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"123456\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"123456\" should be \"1.23456e+5\"","duration":0.17051599989645183,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","status":"passed","title":"PE = 5: \"1.23456e5\" should be \"1.23456e+5\"","duration":0.17190299998037517,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 5: \"12.345e4\" should be \"1.2345e+5\"","status":"passed","title":"PE = 5: \"12.345e4\" should be \"1.2345e+5\"","duration":0.16329999989829957,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Positive Exponent Limit (PE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Positive Exponent Limit (PE) PE = 4: \"12345\" should be \"1.2345e+4\"","status":"passed","title":"PE = 4: \"12345\" should be \"1.2345e+4\"","duration":0.1696800000499934,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.012\" should be \"0.012\"","status":"passed","title":"NE = -2: \"0.012\" should be \"0.012\"","duration":0.22215500008314848,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.0012\" should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"0.0012\" should be \"1.2e-3\"","duration":0.20671399985440075,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","status":"passed","title":"NE = -2: \"0.12e-1\" (0.012) should be \"0.012\"","duration":0.1753410000819713,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","status":"passed","title":"NE = -2: \"12e-4\" (0.0012) should be \"1.2e-3\"","duration":0.17730400012806058,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Scientific Notation - Negative Exponent Limit (NE)"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Scientific Notation - Negative Exponent Limit (NE) NE = -3: \"0.0012\" should be \"0.0012\"","status":"passed","title":"NE = -3: \"0.0012\" should be \"0.0012\"","duration":0.1623909999616444,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"0.000\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"0.000\").toString() should be \"0\"","duration":0.18250600015744567,"failureMessages":[],"meta":{}},{"ancestorTitles":["BigIntPrimitive.prototype.toString() scenarios","Numbers that become \"0\" after stripping trailing zeros"],"fullName":"BigIntPrimitive.prototype.toString() scenarios Numbers that become \"0\" after stripping trailing zeros new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","status":"passed","title":"new BigIntPrimitive(\"-0.0\").toString() should be \"0\"","duration":0.15136299980804324,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","Default dp (0)"],"fullName":"round() Default dp (0) should round to 0 decimal places using BigIntPrimitive.RM by default","status":"passed","title":"should round to 0 decimal places using BigIntPrimitive.RM by default","duration":5.156282000010833,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero positive dp: should truncate fractional part","status":"passed","title":"positive dp: should truncate fractional part","duration":0.6812009999994189,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative dp: should make integer digits zero","status":"passed","title":"negative dp: should make integer digits zero","duration":0.4537680000066757,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero negative numbers: should truncate towards zero","status":"passed","title":"negative numbers: should truncate towards zero","duration":0.4876250000670552,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_DOWN (0) - Truncate towards zero"],"fullName":"round() RM_DOWN (0) - Truncate towards zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.4278339999727905,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero positive dp: half rounds up (away from zero)","status":"passed","title":"positive dp: half rounds up (away from zero)","duration":0.8220289999153465,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative dp: half rounds up (away from zero in magnitude)","status":"passed","title":"negative dp: half rounds up (away from zero in magnitude)","duration":0.6515859998762608,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero negative numbers: half rounds away from zero (more negative)","status":"passed","title":"negative numbers: half rounds away from zero (more negative)","duration":0.44465600000694394,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_UP (1) - Round to nearest, half away from zero"],"fullName":"round() RM_HALF_UP (1) - Round to nearest, half away from zero zero: should remain zero","status":"passed","title":"zero: should remain zero","duration":0.3904160000383854,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even positive dp: half to even","status":"passed","title":"positive dp: half to even","duration":0.5445199999958277,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even dp = 0: half to even","status":"passed","title":"dp = 0: half to even","duration":0.5546919999178499,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_HALF_EVEN (2) - Round to nearest, half to even"],"fullName":"round() RM_HALF_EVEN (2) - Round to nearest, half to even negative numbers: half to even","status":"passed","title":"negative numbers: half to even","duration":0.3087649999652058,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero positive numbers: away from zero","status":"passed","title":"positive numbers: away from zero","duration":0.5455830001737922,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative numbers: away from zero (more negative)","status":"passed","title":"negative numbers: away from zero (more negative)","duration":0.6151990001089871,"failureMessages":[],"meta":{}},{"ancestorTitles":["round()","RM_UP (3) - Round away from zero"],"fullName":"round() RM_UP (3) - Round away from zero negative dp: away from zero","status":"passed","title":"negative dp: away from zero","duration":0.34388400008901954,"failureMessages":[],"meta":{}},{"ancestorTitles":["Debug _decimalDivide output representation"],"fullName":"Debug _decimalDivide output representation DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","status":"failed","title":"DEBUG TEST: should correctly represent 2.5 from _decimalDivide for 10/4","duration":1.5392220001667738,"failureMessages":["Error: DEBUG TEST FAILED for 10/4 (DP=1, internalPrecision=7)\n  _decimalDivide returned: toString()=\"0\"\n    Expected state for 2.5: limbs=[2,5], exponent=-1\n    Actual state:   limbs=[0], exponent=0\n    (Sign was 1)\n    at /app/lib/bigint.test.js:2501:13\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1894:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1860:10)\n    at runTest (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1571:12)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)\n    at runSuite (file:///app/node_modules/@vitest/runner/dist/chunk-hooks.js:1726:8)"],"meta":{}}],"startTime":1749768634354,"endTime":1749768634861.5393,"status":"failed","message":"","name":"/app/lib/bigint.test.js"},{"assertionResults":[{"ancestorTitles":["App Component"],"fullName":"App Component renders initial UI elements correctly","status":"passed","title":"renders initial UI elements correctly","duration":311.47049400000833,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple addition (WebGL Path) and displays result","status":"passed","title":"performs simple addition (WebGL Path) and displays result","duration":281.07133900001645,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple multiplication (WebGL Path) and displays result","status":"passed","title":"performs simple multiplication (WebGL Path) and displays result","duration":133.93791899993084,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component performs simple subtraction (CPU Path) and displays result","status":"passed","title":"performs simple subtraction (CPU Path) and displays result","duration":156.57829700014554,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles error for invalid input","status":"passed","title":"handles error for invalid input","duration":75.84875799994916,"failureMessages":[],"meta":{}},{"ancestorTitles":["App Component"],"fullName":"App Component handles division by zero error","status":"passed","title":"handles division by zero error","duration":114.94975799997337,"failureMessages":[],"meta":{}}],"startTime":1749768634390,"endTime":1749768635464.9497,"status":"passed","message":"","name":"/app/src/App.test.jsx"}]}